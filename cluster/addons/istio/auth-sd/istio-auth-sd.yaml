# To prevent accidental injection into istio-system.
apiVersion: v1
kind: Namespace
metadata:
  name: istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
    istio-injection: disabled
---
# Source: istio-init/templates/configmap-crd-10.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: istio-system
  name: istio-crd-10
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
data:
  crd-10.yaml: |-
    apiVersion: apiextensions.k8s.io/v1beta1
    kind: CustomResourceDefinition
    metadata:
      name: virtualservices.networking.istio.io
      labels:
        k8s-app: istio
        addonmanager.kubernetes.io/mode: Reconcile
        app: istio-pilot
        chart: istio
        heritage: Tiller
        release: istio
      annotations:
        "helm.sh/resource-policy": keep
    spec:
      group: networking.istio.io
      names:
        kind: VirtualService
        listKind: VirtualServiceList
        plural: virtualservices
        singular: virtualservice
        shortNames:
        - vs
        categories:
        - istio-io
        - networking-istio-io
      scope: Namespaced
      version: v1alpha3
      additionalPrinterColumns:
      - JSONPath: .spec.gateways
        description: The names of gateways and sidecars that should apply these routes
        name: Gateways
        type: string
      - JSONPath: .spec.hosts
        description: The destination hosts to which traffic is being sent
        name: Hosts
        type: string
      - JSONPath: .metadata.creationTimestamp
        description: |-
          CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.
          Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
        name: Age
        type: date
    ---
    apiVersion: apiextensions.k8s.io/v1beta1
    kind: CustomResourceDefinition
    metadata:
      name: destinationrules.networking.istio.io
      labels:
        k8s-app: istio
        addonmanager.kubernetes.io/mode: Reconcile
        app: istio-pilot
        chart: istio
        heritage: Tiller
        release: istio
      annotations:
        "helm.sh/resource-policy": keep
    spec:
      group: networking.istio.io
      names:
        kind: DestinationRule
        listKind: DestinationRuleList
        plural: destinationrules
        singular: destinationrule
        shortNames:
        - dr
        categories:
        - istio-io
        - networking-istio-io
      scope: Namespaced
      version: v1alpha3
      additionalPrinterColumns:
      - JSONPath: .spec.host
        description: The name of a service from the service registry
        name: Host
        type: string
      - JSONPath: .metadata.creationTimestamp
        description: |-
          CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.
          Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
        name: Age
        type: date
    ---
    apiVersion: apiextensions.k8s.io/v1beta1
    kind: CustomResourceDefinition
    metadata:
      name: serviceentries.networking.istio.io
      labels:
        k8s-app: istio
        addonmanager.kubernetes.io/mode: Reconcile
        app: istio-pilot
        chart: istio
        heritage: Tiller
        release: istio
      annotations:
        "helm.sh/resource-policy": keep
    spec:
      group: networking.istio.io
      names:
        kind: ServiceEntry
        listKind: ServiceEntryList
        plural: serviceentries
        singular: serviceentry
        shortNames:
        - se
        categories:
        - istio-io
        - networking-istio-io
      scope: Namespaced
      version: v1alpha3
      additionalPrinterColumns:
      - JSONPath: .spec.hosts
        description: The hosts associated with the ServiceEntry
        name: Hosts
        type: string
      - JSONPath: .spec.location
        description: Whether the service is external to the mesh or part of the mesh (MESH_EXTERNAL or MESH_INTERNAL)
        name: Location
        type: string
      - JSONPath: .spec.resolution
        description: Service discovery mode for the hosts (NONE, STATIC, or DNS)
        name: Resolution
        type: string
      - JSONPath: .metadata.creationTimestamp
        description: |-
          CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.
          Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
        name: Age
        type: date
    ---
    apiVersion: apiextensions.k8s.io/v1beta1
    kind: CustomResourceDefinition
    metadata:
      name: gateways.networking.istio.io
      labels:
        k8s-app: istio
        addonmanager.kubernetes.io/mode: Reconcile
        app: istio-pilot
        chart: istio
        heritage: Tiller
        release: istio
      annotations:
        "helm.sh/resource-policy": keep
    spec:
      group: networking.istio.io
      names:
        kind: Gateway
        plural: gateways
        singular: gateway
        shortNames:
        - gw
        categories:
        - istio-io
        - networking-istio-io
      scope: Namespaced
      version: v1alpha3
    ---
    apiVersion: apiextensions.k8s.io/v1beta1
    kind: CustomResourceDefinition
    metadata:
      name: envoyfilters.networking.istio.io
      labels:
        k8s-app: istio
        addonmanager.kubernetes.io/mode: Reconcile
        app: istio-pilot
        chart: istio
        heritage: Tiller
        release: istio
      annotations:
        "helm.sh/resource-policy": keep
    spec:
      group: networking.istio.io
      names:
        kind: EnvoyFilter
        plural: envoyfilters
        singular: envoyfilter
        categories:
        - istio-io
        - networking-istio-io
      scope: Namespaced
      version: v1alpha3
    ---
    kind: CustomResourceDefinition
    apiVersion: apiextensions.k8s.io/v1beta1
    metadata:
      name: clusterrbacconfigs.rbac.istio.io
      labels:
        k8s-app: istio
        addonmanager.kubernetes.io/mode: Reconcile
        app: istio-pilot
        istio: rbac
        heritage: Tiller
        release: istio
      annotations:
        "helm.sh/resource-policy": keep
    spec:
      group: rbac.istio.io
      names:
        kind: ClusterRbacConfig
        plural: clusterrbacconfigs
        singular: clusterrbacconfig
        categories:
        - istio-io
        - rbac-istio-io
      scope: Cluster
      version: v1alpha1
    ---
    kind: CustomResourceDefinition
    apiVersion: apiextensions.k8s.io/v1beta1
    metadata:
      name: policies.authentication.istio.io
      labels:
        k8s-app: istio
        addonmanager.kubernetes.io/mode: Reconcile
        app: istio-citadel
        chart: istio
        heritage: Tiller
        release: istio
      annotations:
        "helm.sh/resource-policy": keep
    spec:
      group: authentication.istio.io
      names:
        kind: Policy
        plural: policies
        singular: policy
        categories:
        - istio-io
        - authentication-istio-io
      scope: Namespaced
      version: v1alpha1
    ---
    kind: CustomResourceDefinition
    apiVersion: apiextensions.k8s.io/v1beta1
    metadata:
      name: meshpolicies.authentication.istio.io
      labels:
        k8s-app: istio
        addonmanager.kubernetes.io/mode: Reconcile
        app: istio-citadel
        chart: istio
        heritage: Tiller
        release: istio
      annotations:
        "helm.sh/resource-policy": keep
    spec:
      group: authentication.istio.io
      names:
        kind: MeshPolicy
        listKind: MeshPolicyList
        plural: meshpolicies
        singular: meshpolicy
        categories:
        - istio-io
        - authentication-istio-io
      scope: Cluster
      version: v1alpha1
    ---
    kind: CustomResourceDefinition
    apiVersion: apiextensions.k8s.io/v1beta1
    metadata:
      name: httpapispecbindings.config.istio.io
      labels:
        k8s-app: istio
        addonmanager.kubernetes.io/mode: Reconcile
        app: istio-mixer
        chart: istio
        heritage: Tiller
        release: istio
      annotations:
        "helm.sh/resource-policy": keep
    spec:
      group: config.istio.io
      names:
        kind: HTTPAPISpecBinding
        plural: httpapispecbindings
        singular: httpapispecbinding
        categories:
        - istio-io
        - apim-istio-io
      scope: Namespaced
      version: v1alpha2
    ---
    kind: CustomResourceDefinition
    apiVersion: apiextensions.k8s.io/v1beta1
    metadata:
      name: httpapispecs.config.istio.io
      labels:
        k8s-app: istio
        addonmanager.kubernetes.io/mode: Reconcile
        app: istio-mixer
        chart: istio
        heritage: Tiller
        release: istio
      annotations:
        "helm.sh/resource-policy": keep
    spec:
      group: config.istio.io
      names:
        kind: HTTPAPISpec
        plural: httpapispecs
        singular: httpapispec
        categories:
        - istio-io
        - apim-istio-io
      scope: Namespaced
      version: v1alpha2
    ---
    kind: CustomResourceDefinition
    apiVersion: apiextensions.k8s.io/v1beta1
    metadata:
      name: quotaspecbindings.config.istio.io
      labels:
        k8s-app: istio
        addonmanager.kubernetes.io/mode: Reconcile
        app: istio-mixer
        chart: istio
        heritage: Tiller
        release: istio
      annotations:
        "helm.sh/resource-policy": keep
    spec:
      group: config.istio.io
      names:
        kind: QuotaSpecBinding
        plural: quotaspecbindings
        singular: quotaspecbinding
        categories:
        - istio-io
        - apim-istio-io
      scope: Namespaced
      version: v1alpha2
    ---
    kind: CustomResourceDefinition
    apiVersion: apiextensions.k8s.io/v1beta1
    metadata:
      name: quotaspecs.config.istio.io
      labels:
        k8s-app: istio
        addonmanager.kubernetes.io/mode: Reconcile
        app: istio-mixer
        chart: istio
        heritage: Tiller
        release: istio
      annotations:
        "helm.sh/resource-policy": keep
    spec:
      group: config.istio.io
      names:
        kind: QuotaSpec
        plural: quotaspecs
        singular: quotaspec
        categories:
        - istio-io
        - apim-istio-io
      scope: Namespaced
      version: v1alpha2
    ---
    kind: CustomResourceDefinition
    apiVersion: apiextensions.k8s.io/v1beta1
    metadata:
      name: rules.config.istio.io
      labels:
        k8s-app: istio
        addonmanager.kubernetes.io/mode: Reconcile
        app: mixer
        package: istio.io.mixer
        istio: core
        chart: istio
        heritage: Tiller
        release: istio
      annotations:
        "helm.sh/resource-policy": keep
    spec:
      group: config.istio.io
      names:
        kind: rule
        plural: rules
        singular: rule
        categories:
        - istio-io
        - policy-istio-io
      scope: Namespaced
      version: v1alpha2
    ---
    kind: CustomResourceDefinition
    apiVersion: apiextensions.k8s.io/v1beta1
    metadata:
      name: attributemanifests.config.istio.io
      labels:
        k8s-app: istio
        addonmanager.kubernetes.io/mode: Reconcile
        app: mixer
        package: istio.io.mixer
        istio: core
        chart: istio
        heritage: Tiller
        release: istio
      annotations:
        "helm.sh/resource-policy": keep
    spec:
      group: config.istio.io
      names:
        kind: attributemanifest
        plural: attributemanifests
        singular: attributemanifest
        categories:
        - istio-io
        - policy-istio-io
      scope: Namespaced
      version: v1alpha2
    ---
    kind: CustomResourceDefinition
    apiVersion: apiextensions.k8s.io/v1beta1
    metadata:
      name: bypasses.config.istio.io
      labels:
        k8s-app: istio
        addonmanager.kubernetes.io/mode: Reconcile
        app: mixer
        package: bypass
        istio: mixer-adapter
        chart: istio
        heritage: Tiller
        release: istio
      annotations:
        "helm.sh/resource-policy": keep
    spec:
      group: config.istio.io
      names:
        kind: bypass
        plural: bypasses
        singular: bypass
        categories:
        - istio-io
        - policy-istio-io
      scope: Namespaced
      version: v1alpha2
    ---
    kind: CustomResourceDefinition
    apiVersion: apiextensions.k8s.io/v1beta1
    metadata:
      name: circonuses.config.istio.io
      labels:
        k8s-app: istio
        addonmanager.kubernetes.io/mode: Reconcile
        app: mixer
        package: circonus
        istio: mixer-adapter
        chart: istio
        heritage: Tiller
        release: istio
      annotations:
        "helm.sh/resource-policy": keep
    spec:
      group: config.istio.io
      names:
        kind: circonus
        plural: circonuses
        singular: circonus
        categories:
        - istio-io
        - policy-istio-io
      scope: Namespaced
      version: v1alpha2
    ---
    kind: CustomResourceDefinition
    apiVersion: apiextensions.k8s.io/v1beta1
    metadata:
      name: deniers.config.istio.io
      labels:
        k8s-app: istio
        addonmanager.kubernetes.io/mode: Reconcile
        app: mixer
        package: denier
        istio: mixer-adapter
        chart: istio
        heritage: Tiller
        release: istio
      annotations:
        "helm.sh/resource-policy": keep
    spec:
      group: config.istio.io
      names:
        kind: denier
        plural: deniers
        singular: denier
        categories:
        - istio-io
        - policy-istio-io
      scope: Namespaced
      version: v1alpha2
    ---
    kind: CustomResourceDefinition
    apiVersion: apiextensions.k8s.io/v1beta1
    metadata:
      name: fluentds.config.istio.io
      labels:
        k8s-app: istio
        addonmanager.kubernetes.io/mode: Reconcile
        app: mixer
        package: fluentd
        istio: mixer-adapter
        chart: istio
        heritage: Tiller
        release: istio
      annotations:
        "helm.sh/resource-policy": keep
    spec:
      group: config.istio.io
      names:
        kind: fluentd
        plural: fluentds
        singular: fluentd
        categories:
        - istio-io
        - policy-istio-io
      scope: Namespaced
      version: v1alpha2
    ---
    kind: CustomResourceDefinition
    apiVersion: apiextensions.k8s.io/v1beta1
    metadata:
      name: kubernetesenvs.config.istio.io
      labels:
        k8s-app: istio
        addonmanager.kubernetes.io/mode: Reconcile
        app: mixer
        package: kubernetesenv
        istio: mixer-adapter
        chart: istio
        heritage: Tiller
        release: istio
      annotations:
        "helm.sh/resource-policy": keep
    spec:
      group: config.istio.io
      names:
        kind: kubernetesenv
        plural: kubernetesenvs
        singular: kubernetesenv
        categories:
        - istio-io
        - policy-istio-io
      scope: Namespaced
      version: v1alpha2
    ---
    kind: CustomResourceDefinition
    apiVersion: apiextensions.k8s.io/v1beta1
    metadata:
      name: listcheckers.config.istio.io
      labels:
        k8s-app: istio
        addonmanager.kubernetes.io/mode: Reconcile
        app: mixer
        package: listchecker
        istio: mixer-adapter
        chart: istio
        heritage: Tiller
        release: istio
      annotations:
        "helm.sh/resource-policy": keep
    spec:
      group: config.istio.io
      names:
        kind: listchecker
        plural: listcheckers
        singular: listchecker
        categories:
        - istio-io
        - policy-istio-io
      scope: Namespaced
      version: v1alpha2
    ---
    kind: CustomResourceDefinition
    apiVersion: apiextensions.k8s.io/v1beta1
    metadata:
      name: memquotas.config.istio.io
      labels:
        k8s-app: istio
        addonmanager.kubernetes.io/mode: Reconcile
        app: mixer
        package: memquota
        istio: mixer-adapter
        chart: istio
        heritage: Tiller
        release: istio
      annotations:
        "helm.sh/resource-policy": keep
    spec:
      group: config.istio.io
      names:
        kind: memquota
        plural: memquotas
        singular: memquota
        categories:
        - istio-io
        - policy-istio-io
      scope: Namespaced
      version: v1alpha2
    ---
    kind: CustomResourceDefinition
    apiVersion: apiextensions.k8s.io/v1beta1
    metadata:
      name: noops.config.istio.io
      labels:
        k8s-app: istio
        addonmanager.kubernetes.io/mode: Reconcile
        app: mixer
        package: noop
        istio: mixer-adapter
        chart: istio
        heritage: Tiller
        release: istio
      annotations:
        "helm.sh/resource-policy": keep
    spec:
      group: config.istio.io
      names:
        kind: noop
        plural: noops
        singular: noop
        categories:
        - istio-io
        - policy-istio-io
      scope: Namespaced
      version: v1alpha2
    ---
    kind: CustomResourceDefinition
    apiVersion: apiextensions.k8s.io/v1beta1
    metadata:
      name: opas.config.istio.io
      labels:
        k8s-app: istio
        addonmanager.kubernetes.io/mode: Reconcile
        app: mixer
        package: opa
        istio: mixer-adapter
        chart: istio
        heritage: Tiller
        release: istio
      annotations:
        "helm.sh/resource-policy": keep
    spec:
      group: config.istio.io
      names:
        kind: opa
        plural: opas
        singular: opa
        categories:
        - istio-io
        - policy-istio-io
      scope: Namespaced
      version: v1alpha2
    ---
    kind: CustomResourceDefinition
    apiVersion: apiextensions.k8s.io/v1beta1
    metadata:
      name: prometheuses.config.istio.io
      labels:
        k8s-app: istio
        addonmanager.kubernetes.io/mode: Reconcile
        app: mixer
        package: prometheus
        istio: mixer-adapter
        chart: istio
        heritage: Tiller
        release: istio
      annotations:
        "helm.sh/resource-policy": keep
    spec:
      group: config.istio.io
      names:
        kind: prometheus
        plural: prometheuses
        singular: prometheus
        categories:
        - istio-io
        - policy-istio-io
      scope: Namespaced
      version: v1alpha2
    ---
    kind: CustomResourceDefinition
    apiVersion: apiextensions.k8s.io/v1beta1
    metadata:
      name: rbacs.config.istio.io
      labels:
        k8s-app: istio
        addonmanager.kubernetes.io/mode: Reconcile
        app: mixer
        package: rbac
        istio: mixer-adapter
        chart: istio
        heritage: Tiller
        release: istio
      annotations:
        "helm.sh/resource-policy": keep
    spec:
      group: config.istio.io
      names:
        kind: rbac
        plural: rbacs
        singular: rbac
        categories:
        - istio-io
        - policy-istio-io
      scope: Namespaced
      version: v1alpha2
    ---
    kind: CustomResourceDefinition
    apiVersion: apiextensions.k8s.io/v1beta1
    metadata:
      name: redisquotas.config.istio.io
      labels:
        k8s-app: istio
        addonmanager.kubernetes.io/mode: Reconcile
        app: mixer
        package: redisquota
        istio: mixer-adapter
        chart: istio
        heritage: Tiller
        release: istio
      annotations:
        "helm.sh/resource-policy": keep
    spec:
      group: config.istio.io
      names:
        kind: redisquota
        plural: redisquotas
        singular: redisquota
      scope: Namespaced
      version: v1alpha2
    ---
    kind: CustomResourceDefinition
    apiVersion: apiextensions.k8s.io/v1beta1
    metadata:
      name: signalfxs.config.istio.io
      labels:
        k8s-app: istio
        addonmanager.kubernetes.io/mode: Reconcile
        app: mixer
        package: signalfx
        istio: mixer-adapter
        chart: istio
        heritage: Tiller
        release: istio
      annotations:
        "helm.sh/resource-policy": keep
    spec:
      group: config.istio.io
      names:
        kind: signalfx
        plural: signalfxs
        singular: signalfx
        categories:
        - istio-io
        - policy-istio-io
      scope: Namespaced
      version: v1alpha2
    ---
    kind: CustomResourceDefinition
    apiVersion: apiextensions.k8s.io/v1beta1
    metadata:
      name: solarwindses.config.istio.io
      labels:
        k8s-app: istio
        addonmanager.kubernetes.io/mode: Reconcile
        app: mixer
        package: solarwinds
        istio: mixer-adapter
        chart: istio
        heritage: Tiller
        release: istio
      annotations:
        "helm.sh/resource-policy": keep
    spec:
      group: config.istio.io
      names:
        kind: solarwinds
        plural: solarwindses
        singular: solarwinds
        categories:
        - istio-io
        - policy-istio-io
      scope: Namespaced
      version: v1alpha2
    ---
    kind: CustomResourceDefinition
    apiVersion: apiextensions.k8s.io/v1beta1
    metadata:
      name: stackdrivers.config.istio.io
      labels:
        k8s-app: istio
        addonmanager.kubernetes.io/mode: Reconcile
        app: mixer
        package: stackdriver
        istio: mixer-adapter
        chart: istio
        heritage: Tiller
        release: istio
      annotations:
        "helm.sh/resource-policy": keep
    spec:
      group: config.istio.io
      names:
        kind: stackdriver
        plural: stackdrivers
        singular: stackdriver
        categories:
        - istio-io
        - policy-istio-io
      scope: Namespaced
      version: v1alpha2
    ---
    kind: CustomResourceDefinition
    apiVersion: apiextensions.k8s.io/v1beta1
    metadata:
      name: statsds.config.istio.io
      labels:
        k8s-app: istio
        addonmanager.kubernetes.io/mode: Reconcile
        app: mixer
        package: statsd
        istio: mixer-adapter
        chart: istio
        heritage: Tiller
        release: istio
      annotations:
        "helm.sh/resource-policy": keep
    spec:
      group: config.istio.io
      names:
        kind: statsd
        plural: statsds
        singular: statsd
        categories:
        - istio-io
        - policy-istio-io
      scope: Namespaced
      version: v1alpha2
    ---
    kind: CustomResourceDefinition
    apiVersion: apiextensions.k8s.io/v1beta1
    metadata:
      name: stdios.config.istio.io
      labels:
        k8s-app: istio
        addonmanager.kubernetes.io/mode: Reconcile
        app: mixer
        package: stdio
        istio: mixer-adapter
        chart: istio
        heritage: Tiller
        release: istio
      annotations:
        "helm.sh/resource-policy": keep
    spec:
      group: config.istio.io
      names:
        kind: stdio
        plural: stdios
        singular: stdio
        categories:
        - istio-io
        - policy-istio-io
      scope: Namespaced
      version: v1alpha2
    ---
    kind: CustomResourceDefinition
    apiVersion: apiextensions.k8s.io/v1beta1
    metadata:
      name: apikeys.config.istio.io
      labels:
        k8s-app: istio
        addonmanager.kubernetes.io/mode: Reconcile
        app: mixer
        package: apikey
        istio: mixer-instance
        chart: istio
        heritage: Tiller
        release: istio
      annotations:
        "helm.sh/resource-policy": keep
    spec:
      group: config.istio.io
      names:
        kind: apikey
        plural: apikeys
        singular: apikey
        categories:
        - istio-io
        - policy-istio-io
      scope: Namespaced
      version: v1alpha2
    ---
    kind: CustomResourceDefinition
    apiVersion: apiextensions.k8s.io/v1beta1
    metadata:
      name: authorizations.config.istio.io
      labels:
        k8s-app: istio
        addonmanager.kubernetes.io/mode: Reconcile
        app: mixer
        package: authorization
        istio: mixer-instance
        chart: istio
        heritage: Tiller
        release: istio
      annotations:
        "helm.sh/resource-policy": keep
    spec:
      group: config.istio.io
      names:
        kind: authorization
        plural: authorizations
        singular: authorization
        categories:
        - istio-io
        - policy-istio-io
      scope: Namespaced
      version: v1alpha2
    ---
    kind: CustomResourceDefinition
    apiVersion: apiextensions.k8s.io/v1beta1
    metadata:
      name: checknothings.config.istio.io
      labels:
        k8s-app: istio
        addonmanager.kubernetes.io/mode: Reconcile
        app: mixer
        package: checknothing
        istio: mixer-instance
        chart: istio
        heritage: Tiller
        release: istio
      annotations:
        "helm.sh/resource-policy": keep
    spec:
      group: config.istio.io
      names:
        kind: checknothing
        plural: checknothings
        singular: checknothing
        categories:
        - istio-io
        - policy-istio-io
      scope: Namespaced
      version: v1alpha2
    ---
    kind: CustomResourceDefinition
    apiVersion: apiextensions.k8s.io/v1beta1
    metadata:
      name: kuberneteses.config.istio.io
      labels:
        k8s-app: istio
        addonmanager.kubernetes.io/mode: Reconcile
        app: mixer
        package: adapter.template.kubernetes
        istio: mixer-instance
        chart: istio
        heritage: Tiller
        release: istio
      annotations:
        "helm.sh/resource-policy": keep
    spec:
      group: config.istio.io
      names:
        kind: kubernetes
        plural: kuberneteses
        singular: kubernetes
        categories:
        - istio-io
        - policy-istio-io
      scope: Namespaced
      version: v1alpha2
    ---
    kind: CustomResourceDefinition
    apiVersion: apiextensions.k8s.io/v1beta1
    metadata:
      name: listentries.config.istio.io
      labels:
        k8s-app: istio
        addonmanager.kubernetes.io/mode: Reconcile
        app: mixer
        package: listentry
        istio: mixer-instance
        chart: istio
        heritage: Tiller
        release: istio
      annotations:
        "helm.sh/resource-policy": keep
    spec:
      group: config.istio.io
      names:
        kind: listentry
        plural: listentries
        singular: listentry
        categories:
        - istio-io
        - policy-istio-io
      scope: Namespaced
      version: v1alpha2
    ---
    kind: CustomResourceDefinition
    apiVersion: apiextensions.k8s.io/v1beta1
    metadata:
      name: logentries.config.istio.io
      labels:
        k8s-app: istio
        addonmanager.kubernetes.io/mode: Reconcile
        app: mixer
        package: logentry
        istio: mixer-instance
        chart: istio
        heritage: Tiller
        release: istio
      annotations:
        "helm.sh/resource-policy": keep
    spec:
      group: config.istio.io
      names:
        kind: logentry
        plural: logentries
        singular: logentry
        categories:
        - istio-io
        - policy-istio-io
      scope: Namespaced
      version: v1alpha2
      additionalPrinterColumns:
      - JSONPath: .spec.severity
        description: The importance of the log entry
        name: Severity
        type: string
      - JSONPath: .spec.timestamp
        description: The time value for the log entry
        name: Timestamp
        type: string
      - JSONPath: .spec.monitored_resource_type
        description: Optional expression to compute the type of the monitored resource this log entry is being recorded on
        name: Res Type
        type: string
      - JSONPath: .metadata.creationTimestamp
        description: |-
          CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.
          Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
        name: Age
        type: date
    ---
    kind: CustomResourceDefinition
    apiVersion: apiextensions.k8s.io/v1beta1
    metadata:
      name: edges.config.istio.io
      labels:
        k8s-app: istio
        addonmanager.kubernetes.io/mode: Reconcile
        app: mixer
        package: edge
        istio: mixer-instance
        chart: istio
        heritage: Tiller
        release: istio
      annotations:
        "helm.sh/resource-policy": keep
    spec:
      group: config.istio.io
      names:
        kind: edge
        plural: edges
        singular: edge
        categories:
        - istio-io
        - policy-istio-io
      scope: Namespaced
      version: v1alpha2
    ---
    kind: CustomResourceDefinition
    apiVersion: apiextensions.k8s.io/v1beta1
    metadata:
      name: metrics.config.istio.io
      labels:
        k8s-app: istio
        addonmanager.kubernetes.io/mode: Reconcile
        app: mixer
        package: metric
        istio: mixer-instance
        chart: istio
        heritage: Tiller
        release: istio
      annotations:
        "helm.sh/resource-policy": keep
    spec:
      group: config.istio.io
      names:
        kind: metric
        plural: metrics
        singular: metric
        categories:
        - istio-io
        - policy-istio-io
      scope: Namespaced
      version: v1alpha2
    ---
    kind: CustomResourceDefinition
    apiVersion: apiextensions.k8s.io/v1beta1
    metadata:
      name: quotas.config.istio.io
      labels:
        k8s-app: istio
        addonmanager.kubernetes.io/mode: Reconcile
        app: mixer
        package: quota
        istio: mixer-instance
        chart: istio
        heritage: Tiller
        release: istio
      annotations:
        "helm.sh/resource-policy": keep
    spec:
      group: config.istio.io
      names:
        kind: quota
        plural: quotas
        singular: quota
        categories:
        - istio-io
        - policy-istio-io
      scope: Namespaced
      version: v1alpha2
    ---
    kind: CustomResourceDefinition
    apiVersion: apiextensions.k8s.io/v1beta1
    metadata:
      name: reportnothings.config.istio.io
      labels:
        k8s-app: istio
        addonmanager.kubernetes.io/mode: Reconcile
        app: mixer
        package: reportnothing
        istio: mixer-instance
        chart: istio
        heritage: Tiller
        release: istio
      annotations:
        "helm.sh/resource-policy": keep
    spec:
      group: config.istio.io
      names:
        kind: reportnothing
        plural: reportnothings
        singular: reportnothing
        categories:
        - istio-io
        - policy-istio-io
      scope: Namespaced
      version: v1alpha2
    ---
    kind: CustomResourceDefinition
    apiVersion: apiextensions.k8s.io/v1beta1
    metadata:
      name: tracespans.config.istio.io
      labels:
        k8s-app: istio
        addonmanager.kubernetes.io/mode: Reconcile
        app: mixer
        package: tracespan
        istio: mixer-instance
        chart: istio
        heritage: Tiller
        release: istio
      annotations:
        "helm.sh/resource-policy": keep
    spec:
      group: config.istio.io
      names:
        kind: tracespan
        plural: tracespans
        singular: tracespan
        categories:
        - istio-io
        - policy-istio-io
      scope: Namespaced
      version: v1alpha2
    ---
    kind: CustomResourceDefinition
    apiVersion: apiextensions.k8s.io/v1beta1
    metadata:
      name: rbacconfigs.rbac.istio.io
      labels:
        k8s-app: istio
        addonmanager.kubernetes.io/mode: Reconcile
        app: mixer
        package: istio.io.mixer
        istio: rbac
        chart: istio
        heritage: Tiller
        release: istio
      annotations:
        "helm.sh/resource-policy": keep
    spec:
      group: rbac.istio.io
      names:
        kind: RbacConfig
        plural: rbacconfigs
        singular: rbacconfig
        categories:
        - istio-io
        - rbac-istio-io
      scope: Namespaced
      version: v1alpha1
    ---
    kind: CustomResourceDefinition
    apiVersion: apiextensions.k8s.io/v1beta1
    metadata:
      name: serviceroles.rbac.istio.io
      labels:
        k8s-app: istio
        addonmanager.kubernetes.io/mode: Reconcile
        app: mixer
        package: istio.io.mixer
        istio: rbac
        chart: istio
        heritage: Tiller
        release: istio
      annotations:
        "helm.sh/resource-policy": keep
    spec:
      group: rbac.istio.io
      names:
        kind: ServiceRole
        plural: serviceroles
        singular: servicerole
        categories:
        - istio-io
        - rbac-istio-io
      scope: Namespaced
      version: v1alpha1
    ---
    kind: CustomResourceDefinition
    apiVersion: apiextensions.k8s.io/v1beta1
    metadata:
      name: servicerolebindings.rbac.istio.io
      labels:
        k8s-app: istio
        addonmanager.kubernetes.io/mode: Reconcile
        app: mixer
        package: istio.io.mixer
        istio: rbac
        chart: istio
        heritage: Tiller
        release: istio
      annotations:
        "helm.sh/resource-policy": keep
    spec:
      group: rbac.istio.io
      names:
        kind: ServiceRoleBinding
        plural: servicerolebindings
        singular: servicerolebinding
        categories:
        - istio-io
        - rbac-istio-io
      scope: Namespaced
      version: v1alpha1
      additionalPrinterColumns:
      - JSONPath: .spec.roleRef.name
        description: The name of the ServiceRole object being referenced
        name: Reference
        type: string
      - JSONPath: .metadata.creationTimestamp
        description: |-
          CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.
          Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
        name: Age
        type: date
    ---
    kind: CustomResourceDefinition
    apiVersion: apiextensions.k8s.io/v1beta1
    metadata:
      name: adapters.config.istio.io
      labels:
        k8s-app: istio
        addonmanager.kubernetes.io/mode: Reconcile
        app: mixer
        package: adapter
        istio: mixer-adapter
        chart: istio
        heritage: Tiller
        release: istio
      annotations:
        "helm.sh/resource-policy": keep
    spec:
      group: config.istio.io
      names:
        kind: adapter
        plural: adapters
        singular: adapter
        categories:
        - istio-io
        - policy-istio-io
      scope: Namespaced
      version: v1alpha2
    ---
    kind: CustomResourceDefinition
    apiVersion: apiextensions.k8s.io/v1beta1
    metadata:
      name: instances.config.istio.io
      labels:
        k8s-app: istio
        addonmanager.kubernetes.io/mode: Reconcile
        app: mixer
        package: instance
        istio: mixer-instance
        chart: istio
        heritage: Tiller
        release: istio
      annotations:
        "helm.sh/resource-policy": keep
    spec:
      group: config.istio.io
      names:
        kind: instance
        plural: instances
        singular: instance
        categories:
        - istio-io
        - policy-istio-io
      scope: Namespaced
      version: v1alpha2
    ---
    kind: CustomResourceDefinition
    apiVersion: apiextensions.k8s.io/v1beta1
    metadata:
      name: templates.config.istio.io
      labels:
        k8s-app: istio
        addonmanager.kubernetes.io/mode: Reconcile
        app: mixer
        package: template
        istio: mixer-template
        chart: istio
        heritage: Tiller
        release: istio
      annotations:
        "helm.sh/resource-policy": keep
    spec:
      group: config.istio.io
      names:
        kind: template
        plural: templates
        singular: template
        categories:
        - istio-io
        - policy-istio-io
      scope: Namespaced
      version: v1alpha2
    ---
    kind: CustomResourceDefinition
    apiVersion: apiextensions.k8s.io/v1beta1
    metadata:
      name: handlers.config.istio.io
      labels:
        k8s-app: istio
        addonmanager.kubernetes.io/mode: Reconcile
        app: mixer
        package: handler
        istio: mixer-handler
        chart: istio
        heritage: Tiller
        release: istio
      annotations:
        "helm.sh/resource-policy": keep
    spec:
      group: config.istio.io
      names:
        kind: handler
        plural: handlers
        singular: handler
        categories:
        - istio-io
        - policy-istio-io
      scope: Namespaced
      version: v1alpha2
    ---

---
# Source: istio-init/templates/configmap-crd-11.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: istio-system
  name: istio-crd-11
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
data:
  crd-11.yaml: |-
    kind: CustomResourceDefinition
    apiVersion: apiextensions.k8s.io/v1beta1
    metadata:
      name: cloudwatches.config.istio.io
      labels:
        k8s-app: istio
        addonmanager.kubernetes.io/mode: Reconcile
        app: mixer
        package: cloudwatch
        istio: mixer-adapter
      annotations:
        "helm.sh/resource-policy": keep
    spec:
      group: config.istio.io
      names:
        kind: cloudwatch
        plural: cloudwatches
        singular: cloudwatch
        categories:
        - istio-io
        - policy-istio-io
      scope: Namespaced
      version: v1alpha2
    ---
    kind: CustomResourceDefinition
    apiVersion: apiextensions.k8s.io/v1beta1
    metadata:
      name: dogstatsds.config.istio.io
      labels:
        k8s-app: istio
        addonmanager.kubernetes.io/mode: Reconcile
        app: mixer
        package: dogstatsd
        istio: mixer-adapter
      annotations:
        "helm.sh/resource-policy": keep
    spec:
      group: config.istio.io
      names:
        kind: dogstatsd
        plural: dogstatsds
        singular: dogstatsd
        categories:
        - istio-io
        - policy-istio-io
      scope: Namespaced
      version: v1alpha2
    ---
    apiVersion: apiextensions.k8s.io/v1beta1
    kind: CustomResourceDefinition
    metadata:
      name: sidecars.networking.istio.io
      labels:
        k8s-app: istio
        addonmanager.kubernetes.io/mode: Reconcile
        app: istio-pilot
        chart: istio
        heritage: Tiller
        release: istio
      annotations:
        "helm.sh/resource-policy": keep
    spec:
      group: networking.istio.io
      names:
        kind: Sidecar
        plural: sidecars
        singular: sidecar
        categories:
        - istio-io
        - networking-istio-io
      scope: Namespaced
      version: v1alpha3
    ---
    kind: CustomResourceDefinition
    apiVersion: apiextensions.k8s.io/v1beta1
    metadata:
      name: zipkins.config.istio.io
      labels:
        k8s-app: istio
        addonmanager.kubernetes.io/mode: Reconcile
        app: mixer
        package: zipkin
        istio: mixer-adapter
      annotations:
        "helm.sh/resource-policy": keep
    spec:
      group: config.istio.io
      names:
        kind: zipkin
        plural: zipkins
        singular: zipkin
        categories:
        - istio-io
        - policy-istio-io
      scope: Namespaced
      version: v1alpha2
    ---


---
# Source: istio-init/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: istio-init-service-account
  namespace: istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
    app: istio-init
    istio: init


---
# Source: istio-init/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: istio-init-istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
    app: istio-init
    istio: istio-init
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list", "create", "watch"]
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["create", "get", "list", "watch", "patch"]

---
# Source: istio-init/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: istio-init-admin-role-binding-istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
    app: istio-init
    istio: init
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: istio-init-istio-system
subjects:
- kind: ServiceAccount
  name: istio-init-service-account
  namespace: istio-system

---
# Source: istio-init/templates/job-crd-10.yaml
apiVersion: batch/v1
kind: Job
metadata:
  namespace: istio-system
  name: istio-init-crd-10-2
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
spec:
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "false"
    spec:
      serviceAccountName: istio-init-service-account
      containers:
      - name: istio-init-crd-10
        image: "gcr.io/gke-release/istio/kubectl:1.1.3-gke.0"
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: crd-10
          mountPath: /etc/istio/crd-10
          readOnly: true
        command: ["kubectl",  "apply", "-f", "/etc/istio/crd-10/crd-10.yaml"]
      volumes:
      - name: crd-10
        configMap:
          name: istio-crd-10
      restartPolicy: OnFailure

---
# Source: istio-init/templates/job-crd-11.yaml
apiVersion: batch/v1
kind: Job
metadata:
  namespace: istio-system
  name: istio-init-crd-11-2
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
spec:
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "false"
    spec:
      serviceAccountName: istio-init-service-account
      containers:
      - name: istio-init-crd-11
        image: "gcr.io/gke-release/istio/kubectl:1.1.3-gke.0"
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: crd-11
          mountPath: /etc/istio/crd-11
          readOnly: true
        command: ["kubectl",  "apply", "-f", "/etc/istio/crd-11/crd-11.yaml"]
      volumes:
      - name: crd-11
        configMap:
          name: istio-crd-11
      restartPolicy: OnFailure

---
# Source: istio-init/templates/configmap-crd-certmanager-10.yaml


---
# Source: istio-init/templates/configmap-crd-certmanager-11.yaml


---
# Source: istio-init/templates/job-crd-certmanager-10.yaml


---
# Source: istio-init/templates/job-crd-certmanager-11.yaml


---
# Source: istio/charts/galley/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: istio-galley-configuration
  namespace: istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
    app: galley
    chart: galley
    heritage: Tiller
    release: istio
    istio: galley
data:
  validatingwebhookconfiguration.yaml: |-
    apiVersion: admissionregistration.k8s.io/v1beta1
    kind: ValidatingWebhookConfiguration
    metadata:
      name: istio-galley
      namespace: istio-system
      labels:
        app: galley
        chart: galley
        heritage: Tiller
        release: istio
        istio: galley
    webhooks:
      - name: pilot.validation.istio.io
        clientConfig:
          service:
            name: istio-galley
            namespace: istio-system
            path: "/admitpilot"
          caBundle: ""
        rules:
          - operations:
            - CREATE
            - UPDATE
            apiGroups:
            - config.istio.io
            apiVersions:
            - v1alpha2
            resources:
            - httpapispecs
            - httpapispecbindings
            - quotaspecs
            - quotaspecbindings
          - operations:
            - CREATE
            - UPDATE
            apiGroups:
            - rbac.istio.io
            apiVersions:
            - "*"
            resources:
            - "*"
          - operations:
            - CREATE
            - UPDATE
            apiGroups:
            - authentication.istio.io
            apiVersions:
            - "*"
            resources:
            - "*"
          - operations:
            - CREATE
            - UPDATE
            apiGroups:
            - networking.istio.io
            apiVersions:
            - "*"
            resources:
            - destinationrules
            - envoyfilters
            - gateways
            - serviceentries
            - sidecars
            - virtualservices
        failurePolicy: Fail
      - name: mixer.validation.istio.io
        clientConfig:
          service:
            name: istio-galley
            namespace: istio-system
            path: "/admitmixer"
          caBundle: ""
        rules:
          - operations:
            - CREATE
            - UPDATE
            apiGroups:
            - config.istio.io
            apiVersions:
            - v1alpha2
            resources:
            - rules
            - attributemanifests
            - circonuses
            - deniers
            - fluentds
            - kubernetesenvs
            - listcheckers
            - memquotas
            - noops
            - opas
            - prometheuses
            - rbacs
            - solarwindses
            - stackdrivers
            - cloudwatches
            - dogstatsds
            - statsds
            - stdios
            - apikeys
            - authorizations
            - checknothings
            # - kuberneteses
            - listentries
            - logentries
            - metrics
            - quotas
            - reportnothings
            - tracespans
        failurePolicy: Fail
---
# Source: istio/charts/security/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: istio-security-custom-resources
  namespace: istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
    app: security
    chart: security
    heritage: Tiller
    release: istio
    istio: citadel
data:
  custom-resources.yaml: |-
    # These policy and destination rules effectively enable mTLS for all services in the mesh. For now,
    # they are added to Istio installation yaml for backward compatible. In future, they should be in
    # a separated yaml file so that customer can enable mTLS independent from installation.

    # Authentication policy to enable mutual TLS for all services (that have sidecar) in the mesh.
    apiVersion: "authentication.istio.io/v1alpha1"
    kind: "MeshPolicy"
    metadata:
      name: "default"
      labels:
        app: security
        chart: security
        heritage: Tiller
        release: istio
    spec:
      peers:
      - mtls: {}
    ---
    # Corresponding destination rule to configure client side to use mutual TLS when talking to
    # any service (host) in the mesh.
    apiVersion: networking.istio.io/v1alpha3
    kind: DestinationRule
    metadata:
      name: "default"
      namespace: istio-system
      labels:
        app: security
        chart: security
        heritage: Tiller
        release: istio
    spec:
      host: "*.local"
      trafficPolicy:
        tls:
          mode: ISTIO_MUTUAL
    ---
    # Destination rule to disable (m)TLS when talking to API server, as API server doesn't have sidecar.
    # Customer should add similar destination rules for other services that dont' have sidecar.
    apiVersion: networking.istio.io/v1alpha3
    kind: DestinationRule
    metadata:
      name: "api-server"
      namespace: istio-system
      labels:
        app: security
        chart: security
        heritage: Tiller
        release: istio
    spec:
      host: "kubernetes.default.svc.cluster.local"
      trafficPolicy:
        tls:
          mode: DISABLE
  run.sh: |-
    #!/bin/sh

    set -x

    if [ "$#" -ne "1" ]; then
        echo "first argument should be path to custom resource yaml"
        exit 1
    fi

    pathToResourceYAML=${1}

    kubectl get validatingwebhookconfiguration istio-galley 2>/dev/null
    if [ "$?" -eq 0 ]; then
        echo "istio-galley validatingwebhookconfiguration found - waiting for istio-galley deployment to be ready"
        while true; do
            kubectl -n istio-system get deployment istio-galley 2>/dev/null
            if [ "$?" -eq 0 ]; then
                break
            fi
            sleep 1
        done
        kubectl -n istio-system rollout status deployment istio-galley
        if [ "$?" -ne 0 ]; then
            echo "istio-galley deployment rollout status check failed"
            exit 1
        fi
        echo "istio-galley deployment ready for configuration validation"
    fi
    sleep 5
    kubectl apply -f ${pathToResourceYAML}


---
# Source: istio/templates/configmap.yaml

apiVersion: v1
kind: ConfigMap
metadata:
  name: istio
  namespace: istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
    app: istio
    chart: istio
    heritage: Tiller
    release: istio
data:
  mesh: |-
    # Set the following variable to true to disable policy checks by the Mixer.
    # Note that metrics will still be reported to the Mixer.
    disablePolicyChecks: false

    # Set enableTracing to false to disable request tracing.
    enableTracing: true

    # Set accessLogFile to empty string to disable access log.
    accessLogFile: ""

    # If accessLogEncoding is TEXT, value will be used directly as the log format
    # example: "[%START_TIME%] %REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%\n"
    # If AccessLogEncoding is JSON, value will be parsed as map[string]string
    # example: '{"start_time": "%START_TIME%", "req_method": "%REQ(:METHOD)%"}'
    # Leave empty to use default log format
    accessLogFormat: ""

    # Set accessLogEncoding to JSON or TEXT to configure sidecar access log
    accessLogEncoding: 'TEXT'
    mixerCheckServer: istio-policy.istio-system.svc.cluster.local:15004
    mixerReportServer: istio-telemetry.istio-system.svc.cluster.local:15004
    # policyCheckFailOpen allows traffic in cases when the mixer policy service cannot be reached.
    # Default is false which means the traffic is denied when the client is unable to connect to Mixer.
    policyCheckFailOpen: false

    # Enable session affinity for Envoy Mixer reports so that calls from a proxy will
    # always target the same Mixer instance.
    sidecarToTelemetrySessionAffinity: true

    # Let Pilot give ingresses the public IP of the Istio ingressgateway
    ingressService: istio-ingressgateway

    # Default connect timeout for dynamic clusters generated by Pilot and returned via XDS
    connectTimeout: 10s

    # DNS refresh rate for Envoy clusters of type STRICT_DNS
    dnsRefreshRate: 5s

    # Unix Domain Socket through which envoy communicates with NodeAgent SDS to get
    # key/cert for mTLS. Use secret-mount files instead of SDS if set to empty.
    sdsUdsPath:

    # This flag is used by secret discovery service(SDS).
    # If set to true(prerequisite: https://kubernetes.io/docs/concepts/storage/volumes/#projected), Istio will inject volumes mount
    # for k8s service account JWT, so that K8s API server mounts k8s service account JWT to envoy container, which
    # will be used to generate key/cert eventually. This isn't supported for non-k8s case.
    enableSdsTokenMount: false

    # This flag is used by secret discovery service(SDS).
    # If set to true, envoy will fetch normal k8s service account JWT from '/var/run/secrets/kubernetes.io/serviceaccount/token'
    # (https://kubernetes.io/docs/tasks/access-application-cluster/access-cluster/#accessing-the-api-from-a-pod)
    # and pass to sds server, which will be used to request key/cert eventually.
    # this flag is ignored if enableSdsTokenMount is set.
    # This isn't supported for non-k8s case.
    sdsUseK8sSaJwt: false

    # The trust domain corresponds to the trust root of a system.
    # Refer to https://github.com/spiffe/spiffe/blob/master/standards/SPIFFE-ID.md#21-trust-domain
    trustDomain:

    # Set the default behavior of the sidecar for handling outbound traffic from the application:
    # ALLOW_ANY - outbound traffic to unknown destinations will be allowed, in case there are no
    #   services or ServiceEntries for the destination port
    # REGISTRY_ONLY - restrict outbound traffic to services defined in the service registry as well
    #   as those defined through ServiceEntries
    outboundTrafficPolicy:
      mode: ALLOW_ANY

    localityLbSetting:
      {}


    # The namespace to treat as the administrative root namespace for istio
    # configuration.
    rootNamespace: istio-system
    configSources:
    - address: istio-galley.istio-system.svc:9901
      tlsSettings:
        mode: ISTIO_MUTUAL

    defaultConfig:
      #
      # TCP connection timeout between Envoy & the application, and between Envoys.  Used for static clusters
      # defined in Envoy's configuration file
      connectTimeout: 10s
      #
      ### ADVANCED SETTINGS #############
      # Where should envoy's configuration be stored in the istio-proxy container
      configPath: "/etc/istio/proxy"
      binaryPath: "/usr/local/bin/envoy"
      # The pseudo service name used for Envoy.
      serviceCluster: istio-proxy
      # These settings that determine how long an old Envoy
      # process should be kept alive after an occasional reload.
      drainDuration: 45s
      parentShutdownDuration: 1m0s
      #
      # The mode used to redirect inbound connections to Envoy. This setting
      # has no effect on outbound traffic: iptables REDIRECT is always used for
      # outbound connections.
      # If "REDIRECT", use iptables REDIRECT to NAT and redirect to Envoy.
      # The "REDIRECT" mode loses source addresses during redirection.
      # If "TPROXY", use iptables TPROXY to redirect to Envoy.
      # The "TPROXY" mode preserves both the source and destination IP
      # addresses and ports, so that they can be used for advanced filtering
      # and manipulation.
      # The "TPROXY" mode also configures the sidecar to run with the
      # CAP_NET_ADMIN capability, which is required to use TPROXY.
      #interceptionMode: REDIRECT
      #
      # Port where Envoy listens (on local host) for admin commands
      # You can exec into the istio-proxy container in a pod and
      # curl the admin port (curl http://localhost:15000/) to obtain
      # diagnostic information from Envoy. See
      # https://lyft.github.io/envoy/docs/operations/admin.html
      # for more details
      proxyAdminPort: 15000
      #
      # Set concurrency to a specific number to control the number of Proxy worker threads.
      # If set to 0 (default), then start worker thread for each CPU thread/core.
      concurrency: 2
      #
      tracing:
        zipkin:
          # Address of the Zipkin collector
          address: zipkin.istio-system:9411
      #
      # Mutual TLS authentication between sidecars and istio control plane.
      controlPlaneAuthPolicy: MUTUAL_TLS
      #
      # Address where istio Pilot service is running
      discoveryAddress: istio-pilot.istio-system:15011

  # Configuration file for the mesh networks to be used by the Split Horizon EDS.
  meshNetworks: |-
    networks: {}

---
# Source: istio/templates/sidecar-injector-configmap.yaml

apiVersion: v1
kind: ConfigMap
metadata:
  name: istio-sidecar-injector
  namespace: istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
    app: istio
    chart: istio
    heritage: Tiller
    release: istio
    istio: sidecar-injector
data:
  config: |-
    policy: enabled
    template: |-
      rewriteAppHTTPProbe: false
      initContainers:
      [[ if ne (annotation .ObjectMeta `sidecar.istio.io/interceptionMode` .ProxyConfig.InterceptionMode) "NONE" ]]
      - name: istio-init
        image: "gke.gcr.io/istio/proxy_init:1.1.13-gke.0"
        args:
        - "-p"
        - [[ .MeshConfig.ProxyListenPort ]]
        - "-u"
        - 1337
        - "-m"
        - [[ annotation .ObjectMeta `sidecar.istio.io/interceptionMode` .ProxyConfig.InterceptionMode ]]
        - "-i"
        - "[[ annotation .ObjectMeta `traffic.sidecar.istio.io/includeOutboundIPRanges`  "*"  ]]"
        - "-x"
        - "[[ annotation .ObjectMeta `traffic.sidecar.istio.io/excludeOutboundIPRanges`  ""  ]]"
        - "-b"
        - "[[ annotation .ObjectMeta `traffic.sidecar.istio.io/includeInboundPorts` (includeInboundPorts .Spec.Containers) ]]"
        - "-d"
        - "[[ excludeInboundPort (annotation .ObjectMeta `status.sidecar.istio.io/port`  15020 ) (annotation .ObjectMeta `traffic.sidecar.istio.io/excludeInboundPorts`  "" ) ]]"
        [[ if (isset .ObjectMeta.Annotations `traffic.sidecar.istio.io/kubevirtInterfaces`) -]]
        - "-k"
        - "[[ index .ObjectMeta.Annotations `traffic.sidecar.istio.io/kubevirtInterfaces` ]]"
        [[ end -]]
        imagePullPolicy: IfNotPresent
        resources:
          requests:
            cpu: 10m
            memory: 10Mi
          limits:
            cpu: 100m
            memory: 50Mi
        securityContext:
          runAsUser: 0
          runAsNonRoot: false
          capabilities:
            add:
            - NET_ADMIN
        restartPolicy: Always
      [[ end -]]
      containers:
      - name: istio-proxy
        # PATCH #2: Graceful shutdown of the istio-proxy. See https://github.com/istio/istio/issues/7136.
        lifecycle:
          preStop:
            exec:
              command: ["sh", "-c", 'sleep 20; while [ $(netstat -plunt | grep tcp | grep -v envoy | wc -l | xargs) -ne 0 ]; do sleep 1; done']
        # PATCH #2 ends.
        image: [[ annotation .ObjectMeta `sidecar.istio.io/proxyImage`  "gke.gcr.io/istio/proxyv2:1.1.13-gke.0"  ]]
        ports:
        - containerPort: 15090
          protocol: TCP
          name: http-envoy-prom
        args:
        - proxy
        - sidecar
        - --domain
        - $(POD_NAMESPACE).svc.cluster.local
        - --configPath
        - [[ .ProxyConfig.ConfigPath ]]
        - --binaryPath
        - [[ .ProxyConfig.BinaryPath ]]
        - --serviceCluster
        [[ if ne "" (index .ObjectMeta.Labels "app") -]]
        - [[ index .ObjectMeta.Labels "app" ]].$(POD_NAMESPACE)
        [[ else -]]
        - [[ valueOrDefault .DeploymentMeta.Name "istio-proxy" ]].[[ valueOrDefault .DeploymentMeta.Namespace "default" ]]
        [[ end -]]
        - --drainDuration
        - [[ formatDuration .ProxyConfig.DrainDuration ]]
        - --parentShutdownDuration
        - [[ formatDuration .ProxyConfig.ParentShutdownDuration ]]
        - --discoveryAddress
        - [[ annotation .ObjectMeta `sidecar.istio.io/discoveryAddress` .ProxyConfig.DiscoveryAddress ]]
        - --zipkinAddress
        - [[ .ProxyConfig.GetTracing.GetZipkin.GetAddress ]]
        - --connectTimeout
        - [[ formatDuration .ProxyConfig.ConnectTimeout ]]
        - --proxyAdminPort
        - [[ .ProxyConfig.ProxyAdminPort ]]
        [[ if gt .ProxyConfig.Concurrency 0 -]]
        - --concurrency
        - [[ .ProxyConfig.Concurrency ]]
        [[ end -]]
        - --controlPlaneAuthPolicy
        - [[ annotation .ObjectMeta `sidecar.istio.io/controlPlaneAuthPolicy` .ProxyConfig.ControlPlaneAuthPolicy ]]
      [[- if (ne (annotation .ObjectMeta `status.sidecar.istio.io/port`  15020 ) "0") ]]
        - --statusPort
        - [[ annotation .ObjectMeta `status.sidecar.istio.io/port`  15020  ]]
        - --applicationPorts
        - "[[ annotation .ObjectMeta `readiness.status.sidecar.istio.io/applicationPorts` (applicationPorts .Spec.Containers) ]]"
      [[- end ]]
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: INSTANCE_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP

        - name: ISTIO_META_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: ISTIO_META_CONFIG_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: ISTIO_META_INTERCEPTION_MODE
          value: [[ or (index .ObjectMeta.Annotations "sidecar.istio.io/interceptionMode") .ProxyConfig.InterceptionMode.String ]]
        [[ if .ObjectMeta.Annotations ]]
        - name: ISTIO_METAJSON_ANNOTATIONS
          value: |
                 [[ toJSON .ObjectMeta.Annotations ]]
        [[ end ]]
        [[ if .ObjectMeta.Labels ]]
        - name: ISTIO_METAJSON_LABELS
          value: |
                 [[ toJSON .ObjectMeta.Labels ]]
        [[ end ]]
        [[- if (isset .ObjectMeta.Annotations `sidecar.istio.io/bootstrapOverride`) ]]
        - name: ISTIO_BOOTSTRAP_OVERRIDE
          value: "/etc/istio/custom-bootstrap/custom_bootstrap.json"
        [[- end ]]
        imagePullPolicy: IfNotPresent
        [[ if (ne (annotation .ObjectMeta `status.sidecar.istio.io/port`  15020 ) "0") ]]
        readinessProbe:
          httpGet:
            path: /healthz/ready
            port: [[ annotation .ObjectMeta `status.sidecar.istio.io/port`  15020  ]]
          initialDelaySeconds: [[ annotation .ObjectMeta `readiness.status.sidecar.istio.io/initialDelaySeconds`  1  ]]
          periodSeconds: [[ annotation .ObjectMeta `readiness.status.sidecar.istio.io/periodSeconds`  2  ]]
          failureThreshold: [[ annotation .ObjectMeta `readiness.status.sidecar.istio.io/failureThreshold`  30  ]]
        [[ end -]]securityContext:
          readOnlyRootFilesystem: true
          [[ if eq (annotation .ObjectMeta `sidecar.istio.io/interceptionMode` .ProxyConfig.InterceptionMode) "TPROXY" -]]
          capabilities:
            add:
            - NET_ADMIN
          runAsGroup: 1337
          [[ else -]]

          runAsUser: 1337
          [[- end ]]
        resources:
          [[ if or (isset .ObjectMeta.Annotations `sidecar.istio.io/proxyCPU`) (isset .ObjectMeta.Annotations `sidecar.istio.io/proxyMemory`) -]]
          requests:
            [[ if (isset .ObjectMeta.Annotations `sidecar.istio.io/proxyCPU`) -]]
            cpu: "[[ index .ObjectMeta.Annotations `sidecar.istio.io/proxyCPU` ]]"
            [[ end ]]
            [[ if (isset .ObjectMeta.Annotations `sidecar.istio.io/proxyMemory`) -]]
            memory: "[[ index .ObjectMeta.Annotations `sidecar.istio.io/proxyMemory` ]]"
            [[ end ]]
        [[ else -]]
          limits:
            cpu: 2000m
            memory: 1024Mi
          requests:
            cpu: 100m
            memory: 128Mi

        [[ end -]]
        volumeMounts:
        [[- if (isset .ObjectMeta.Annotations `sidecar.istio.io/bootstrapOverride`) ]]
        - mountPath: /etc/istio/custom-bootstrap
          name: custom-bootstrap-volume
        [[- end ]]
        - mountPath: /etc/istio/proxy
          name: istio-envoy
        - mountPath: /etc/certs/
          name: istio-certs
          readOnly: true
          [[- if isset .ObjectMeta.Annotations `sidecar.istio.io/userVolumeMount` ]]
          [[ range $index, $value := fromJSON (index .ObjectMeta.Annotations `sidecar.istio.io/userVolumeMount`) ]]
        - name: "[[ $index ]]"
          [[ toYaml $value | indent 4 ]]
          [[ end ]]
          [[- end ]]
      volumes:
      [[- if (isset .ObjectMeta.Annotations `sidecar.istio.io/bootstrapOverride`) ]]
      - name: custom-bootstrap-volume
        configMap:
          name: [[ annotation .ObjectMeta `sidecar.istio.io/bootstrapOverride` `` ]]
      [[- end ]]
      - emptyDir:
          medium: Memory
        name: istio-envoy
      - name: istio-certs
        secret:
          optional: true
          [[ if eq .Spec.ServiceAccountName "" -]]
          secretName: istio.default
          [[ else -]]
          secretName: [[ printf "istio.%s" .Spec.ServiceAccountName ]]
          [[ end -]]
        [[- if isset .ObjectMeta.Annotations `sidecar.istio.io/userVolume` ]]
        [[ range $index, $value := fromJSON (index .ObjectMeta.Annotations `sidecar.istio.io/userVolume`) ]]
      - name: "[[ $index ]]"
        [[ toYaml $value | indent 2 ]]
        [[ end ]]
        [[ end ]]

---
# Source: istio/charts/galley/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: istio-galley-service-account
  namespace: istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
    app: galley
    chart: galley
    heritage: Tiller
    release: istio

---
# Source: istio/charts/gateways/templates/serviceaccount.yaml

apiVersion: v1
kind: ServiceAccount
metadata:
  name: istio-ingressgateway-service-account
  namespace: istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
    app: istio-ingressgateway
    chart: gateways
    heritage: Tiller
    release: istio
---


---
# Source: istio/charts/mixer/templates/serviceaccount.yaml

apiVersion: v1
kind: ServiceAccount
metadata:
  name: istio-mixer-service-account
  namespace: istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
    app: mixer
    chart: mixer
    heritage: Tiller
    release: istio

---
# Source: istio/charts/pilot/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: istio-pilot-service-account
  namespace: istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
    app: pilot
    chart: pilot
    heritage: Tiller
    release: istio

---
# Source: istio/charts/security/templates/cleanup-secrets.yaml
# The reason for creating a ServiceAccount and ClusterRole specifically for this
# post-delete hooked job is because the citadel ServiceAccount is being deleted
# before this hook is launched. On the other hand, running this hook before the
# deletion of the citadel (e.g. pre-delete) won't delete the secrets because they
# will be re-created immediately by the to-be-deleted citadel.
#
# It's also important that the ServiceAccount, ClusterRole and ClusterRoleBinding
# will be ready before running the hooked Job therefore the hook weights.

apiVersion: v1
kind: ServiceAccount
metadata:
  name: istio-cleanup-secrets-service-account
  namespace: istio-system
  annotations:
    "helm.sh/hook": post-delete
    "helm.sh/hook-delete-policy": hook-succeeded
    "helm.sh/hook-weight": "1"
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
    app: security
    chart: security
    heritage: Tiller
    release: istio
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: istio-cleanup-secrets-istio-system
  annotations:
    "helm.sh/hook": post-delete
    "helm.sh/hook-delete-policy": hook-succeeded
    "helm.sh/hook-weight": "1"
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
    app: security
    chart: security
    heritage: Tiller
    release: istio
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["list", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: istio-cleanup-secrets-istio-system
  annotations:
    "helm.sh/hook": post-delete
    "helm.sh/hook-delete-policy": hook-succeeded
    "helm.sh/hook-weight": "2"
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
    app: security
    chart: security
    heritage: Tiller
    release: istio
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: istio-cleanup-secrets-istio-system
subjects:
  - kind: ServiceAccount
    name: istio-cleanup-secrets-service-account
    namespace: istio-system
---
apiVersion: batch/v1
kind: Job
metadata:
  name: istio-cleanup-secrets-1.1.12
  namespace: istio-system
  annotations:
    "helm.sh/hook": post-delete
    "helm.sh/hook-delete-policy": hook-succeeded
    "helm.sh/hook-weight": "3"
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
    app: security
    chart: security
    heritage: Tiller
    release: istio
spec:
  template:
    metadata:
      name: istio-cleanup-secrets
      labels:
        app: security
        chart: security
        heritage: Tiller
        release: istio
    spec:
      serviceAccountName: istio-cleanup-secrets-service-account
      containers:
        - name: kubectl
          image: "gke.gcr.io/istio/kubectl:1.1.13-gke.0"
          imagePullPolicy: IfNotPresent
          command:
          - /bin/bash
          - -c
          - >
              kubectl get secret --all-namespaces | grep "istio.io/key-and-cert" |  while read -r entry; do
                ns=$(echo $entry | awk '{print $1}');
                name=$(echo $entry | awk '{print $2}');
                kubectl delete secret $name -n $ns;
              done
      restartPolicy: OnFailure
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - amd64
                - ppc64le
                - s390x
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 2
            preference:
              matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - amd64
          - weight: 2
            preference:
              matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - ppc64le
          - weight: 2
            preference:
              matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - s390x

---
# Source: istio/charts/security/templates/create-custom-resources-job.yaml

apiVersion: v1
kind: ServiceAccount
metadata:
  name: istio-security-post-install-account
  namespace: istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
    app: security
    chart: security
    heritage: Tiller
    release: istio
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: istio-security-post-install-istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
    app: security
    chart: security
    heritage: Tiller
    release: istio
rules:
- apiGroups: ["authentication.istio.io"] # needed to create default authn policy
  resources: ["*"]
  verbs: ["*"]
- apiGroups: ["networking.istio.io"] # needed to create security destination rules
  resources: ["*"]
  verbs: ["*"]
- apiGroups: ["admissionregistration.k8s.io"]
  resources: ["validatingwebhookconfigurations"]
  verbs: ["get"]
- apiGroups: ["extensions", "apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: istio-security-post-install-role-binding-istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
    app: security
    chart: security
    heritage: Tiller
    release: istio
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: istio-security-post-install-istio-system
subjects:
  - kind: ServiceAccount
    name: istio-security-post-install-account
    namespace: istio-system
---
apiVersion: batch/v1
kind: Job	
metadata:	
  name: istio-security-post-install-1.1.12	
  namespace: istio-system	
  annotations:	
    "helm.sh/hook": post-install	
    "helm.sh/hook-delete-policy": hook-succeeded	
  labels:	
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
    app: security	
    chart: security	
    heritage: Tiller	
    release: istio	
spec:	
  template:	
    metadata:	
      name: istio-security-post-install	
      labels:	
        app: security	
        chart: security	
        heritage: Tiller	
        release: istio	
    spec:	
      serviceAccountName: istio-security-post-install-account	
      containers:	
        - name: kubectl	
          image: "gke.gcr.io/istio/kubectl:1.1.13-gke.0"
          imagePullPolicy: IfNotPresent	
          command: [ "/bin/bash", "/tmp/security/run.sh", "/tmp/security/custom-resources.yaml" ]	
          volumeMounts:	
            - mountPath: "/tmp/security"	
              name: tmp-configmap-security	
      volumes:	
        - name: tmp-configmap-security	
          configMap:	
            name: istio-security-custom-resources	
      restartPolicy: OnFailure	
      affinity:      
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - amd64
                - ppc64le
                - s390x
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 2
            preference:
              matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - amd64
          - weight: 2
            preference:
              matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - ppc64le
          - weight: 2
            preference:
              matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - s390x

---
# Source: istio/charts/security/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: istio-citadel-service-account
  namespace: istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
    app: security
    chart: security
    heritage: Tiller
    release: istio

---
# Source: istio/charts/sidecarInjectorWebhook/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: istio-sidecar-injector-service-account
  namespace: istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
    app: sidecarInjectorWebhook
    chart: sidecarInjectorWebhook
    heritage: Tiller
    release: istio
    istio: sidecar-injector

---
# Source: istio/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: istio-multi
  namespace: istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile

---
# Source: istio/charts/galley/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: istio-galley-istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
    app: galley
    chart: galley
    heritage: Tiller
    release: istio
rules:
- apiGroups: ["admissionregistration.k8s.io"]
  resources: ["validatingwebhookconfigurations"]
  verbs: ["*"]
- apiGroups: ["config.istio.io"] # istio mixer CRD watcher
  resources: ["*"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["networking.istio.io"]
  resources: ["*"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["authentication.istio.io"]
  resources: ["*"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["rbac.istio.io"]
  resources: ["*"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["extensions","apps"]
  resources: ["deployments"]
  resourceNames: ["istio-galley"]
  verbs: ["get"]
- apiGroups: [""]
  resources: ["pods", "nodes", "services", "endpoints"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["extensions"]
  resources: ["ingresses"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["extensions"]
  resources: ["deployments/finalizers"]
  resourceNames: ["istio-galley"]
  verbs: ["update"]

---
# Source: istio/charts/gateways/templates/clusterrole.yaml

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: istio-ingressgateway-istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
    app: ingressgateway
    chart: gateways
    heritage: Tiller
    release: istio
rules:
- apiGroups: ["networking.istio.io"]
  resources: ["virtualservices", "destinationrules", "gateways"]
  verbs: ["get", "watch", "list", "update"]
---

---
# Source: istio/charts/mixer/templates/clusterrole.yaml

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: istio-mixer-istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
    app: mixer
    chart: mixer
    heritage: Tiller
    release: istio
rules:
- apiGroups: ["config.istio.io"] # istio CRD watcher
  resources: ["*"]
  verbs: ["create", "get", "list", "watch", "patch"]
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["configmaps", "endpoints", "pods", "services", "namespaces", "secrets", "replicationcontrollers"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["extensions", "apps"]
  resources: ["replicasets"]
  verbs: ["get", "list", "watch"]

---
# Source: istio/charts/pilot/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: istio-pilot-istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
    app: pilot
    chart: pilot
    heritage: Tiller
    release: istio
rules:
- apiGroups: ["config.istio.io"]
  resources: ["*"]
  verbs: ["*"]
- apiGroups: ["rbac.istio.io"]
  resources: ["*"]
  verbs: ["get", "watch", "list"]
- apiGroups: ["networking.istio.io"]
  resources: ["*"]
  verbs: ["*"]
- apiGroups: ["authentication.istio.io"]
  resources: ["*"]
  verbs: ["*"]
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["*"]
- apiGroups: ["extensions"]
  resources: ["ingresses", "ingresses/status"]
  verbs: ["*"]
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["create", "get", "list", "watch", "update"]
- apiGroups: [""]
  resources: ["endpoints", "pods", "services", "namespaces", "nodes", "secrets"]
  verbs: ["get", "list", "watch"]

---
# Source: istio/charts/security/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: istio-citadel-istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
    app: security
    chart: security
    heritage: Tiller
    release: istio
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["create", "get", "update"]
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["create", "get", "watch", "list", "update", "delete"]
- apiGroups: [""]
  resources: ["serviceaccounts", "services"]
  verbs: ["get", "watch", "list"]
- apiGroups: ["authentication.k8s.io"]
  resources: ["tokenreviews"]
  verbs: ["create"]

---
# Source: istio/charts/sidecarInjectorWebhook/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: istio-sidecar-injector-istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
    app: sidecarInjectorWebhook
    chart: sidecarInjectorWebhook
    heritage: Tiller
    release: istio
    istio: sidecar-injector
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["admissionregistration.k8s.io"]
  resources: ["mutatingwebhookconfigurations"]
  verbs: ["get", "list", "watch", "patch"]

---
# Source: istio/templates/clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: istio-reader
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
rules:
  - apiGroups: ['']
    resources: ['nodes', 'pods', 'services', 'endpoints', "replicationcontrollers"]
    verbs: ['get', 'watch', 'list']
  - apiGroups: ["extensions", "apps"]
    resources: ["replicasets"]
    verbs: ["get", "list", "watch"]

---
# Source: istio/charts/galley/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: istio-galley-admin-role-binding-istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
    app: galley
    chart: galley
    heritage: Tiller
    release: istio
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: istio-galley-istio-system
subjects:
  - kind: ServiceAccount
    name: istio-galley-service-account
    namespace: istio-system

---
# Source: istio/charts/gateways/templates/clusterrolebindings.yaml

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: istio-ingressgateway-istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
    app: ingressgateway
    chart: gateways
    heritage: Tiller
    release: istio
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: istio-ingressgateway-istio-system
subjects:
- kind: ServiceAccount
  name: istio-ingressgateway-service-account
  namespace: istio-system
---

---
# Source: istio/charts/mixer/templates/clusterrolebinding.yaml

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: istio-mixer-admin-role-binding-istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
    app: mixer
    chart: mixer
    heritage: Tiller
    release: istio
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: istio-mixer-istio-system
subjects:
  - kind: ServiceAccount
    name: istio-mixer-service-account
    namespace: istio-system

---
# Source: istio/charts/pilot/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: istio-pilot-istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
    app: pilot
    chart: pilot
    heritage: Tiller
    release: istio
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: istio-pilot-istio-system
subjects:
  - kind: ServiceAccount
    name: istio-pilot-service-account
    namespace: istio-system

---
# Source: istio/charts/security/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: istio-citadel-istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
    app: security
    chart: security
    heritage: Tiller
    release: istio
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: istio-citadel-istio-system
subjects:
  - kind: ServiceAccount
    name: istio-citadel-service-account
    namespace: istio-system

---
# Source: istio/charts/sidecarInjectorWebhook/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: istio-sidecar-injector-admin-role-binding-istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
    app: sidecarInjectorWebhook
    chart: sidecarInjectorWebhook
    heritage: Tiller
    release: istio
    istio: sidecar-injector
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: istio-sidecar-injector-istio-system
subjects:
  - kind: ServiceAccount
    name: istio-sidecar-injector-service-account
    namespace: istio-system

---
# Source: istio/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: istio-multi
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
    chart: istio-1.1.12
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: istio-reader
subjects:
- kind: ServiceAccount
  name: istio-multi
  namespace: istio-system

---
# Source: istio/charts/gateways/templates/role.yaml

apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: istio-ingressgateway-sds
  namespace: istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "watch", "list"]
---

---
# Source: istio/charts/gateways/templates/rolebindings.yaml

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: istio-ingressgateway-sds
  namespace: istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: istio-ingressgateway-sds
subjects:
- kind: ServiceAccount
  name: istio-ingressgateway-service-account
---

---
# Source: istio/charts/galley/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: istio-galley
  namespace: istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
    kubernetes.io/cluster-service: "true"
    app: galley
    chart: galley
    heritage: Tiller
    release: istio
    istio: galley
spec:
  ports:
  - port: 443
    name: https-validation
  - port: 15014
    name: http-monitoring
  - port: 9901
    name: grpc-mcp
  selector:
    istio: galley

---
# Source: istio/charts/gateways/templates/service.yaml

apiVersion: v1
kind: Service
metadata:
  name: istio-ingressgateway
  namespace: istio-system
  annotations:
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
    kubernetes.io/cluster-service: "true"
    chart: gateways
    heritage: Tiller
    release: istio
    app: istio-ingressgateway
    istio: ingressgateway
spec:
  type: LoadBalancer
  selector:
    release: istio
    app: istio-ingressgateway
    istio: ingressgateway
  ports:
    -
      name: status-port
      port: 15020
      targetPort: 15020
    -
      name: http2
      nodePort: 31380
      port: 80
      targetPort: 80
    -
      name: https
      nodePort: 31390
      port: 443
    -
      name: tcp
      nodePort: 31400
      port: 31400
    -
      name: https-kiali
      port: 15029
      targetPort: 15029
    -
      name: https-prometheus
      port: 15030
      targetPort: 15030
    -
      name: https-grafana
      port: 15031
      targetPort: 15031
    -
      name: https-tracing
      port: 15032
      targetPort: 15032
    -
      name: tls
      port: 15443
      targetPort: 15443
---

---
# Source: istio/charts/mixer/templates/service.yaml

apiVersion: v1
kind: Service
metadata:
  name: istio-policy
  namespace: istio-system
  annotations:
   networking.istio.io/exportTo: "*"
  labels:
    app: mixer
    chart: mixer
    heritage: Tiller
    release: istio
    istio: mixer
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
    kubernetes.io/cluster-service: "true"
spec:
  ports:
  - name: grpc-mixer
    port: 9091
  - name: grpc-mixer-mtls
    port: 15004
  - name: http-monitoring
    port: 15014
  selector:
    istio: mixer
    istio-mixer-type: policy
---
apiVersion: v1
kind: Service
metadata:
  name: istio-telemetry
  namespace: istio-system
  annotations:
   networking.istio.io/exportTo: "*"
  labels:
    app: mixer
    chart: mixer
    heritage: Tiller
    release: istio
    istio: mixer
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
    kubernetes.io/cluster-service: "true"
spec:
  ports:
  - name: grpc-mixer
    port: 9091
  - name: grpc-mixer-mtls
    port: 15004
  - name: http-monitoring
    port: 15014
  - name: prometheus
    port: 42422
  selector:
    istio: mixer
    istio-mixer-type: telemetry
  sessionAffinity: ClientIP
---


---
# Source: istio/charts/pilot/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: istio-pilot
  namespace: istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
    kubernetes.io/cluster-service: "true"
    app: pilot
    chart: pilot
    heritage: Tiller
    release: istio
    istio: pilot
spec:
  ports:
  - port: 15010
    name: grpc-xds # direct
  - port: 15011
    name: https-xds # mTLS
  - port: 8080
    name: http-legacy-discovery # direct
  - port: 15014
    name: http-monitoring
  selector:
    istio: pilot

---
# Source: istio/charts/security/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  # we use the normal name here (e.g. 'prometheus')
  # as grafana is configured to use this as a data source
  name: istio-citadel
  namespace: istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
    kubernetes.io/cluster-service: "true"
    app: security
    chart: security
    heritage: Tiller
    release: istio
    istio: citadel
spec:
  ports:
    - name: grpc-citadel
      port: 8060
      targetPort: 8060
      protocol: TCP
    - name: http-monitoring
      port: 15014
  selector:
    istio: citadel

---
# Source: istio/charts/sidecarInjectorWebhook/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: istio-sidecar-injector
  namespace: istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
    kubernetes.io/cluster-service: "true"
    app: sidecarInjectorWebhook
    chart: sidecarInjectorWebhook
    heritage: Tiller
    release: istio
    istio: sidecar-injector
spec:
  ports:
  - port: 443
  selector:
    istio: sidecar-injector

---
# Source: istio/charts/galley/templates/deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: istio-galley
  namespace: istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
    app: galley
    chart: galley
    heritage: Tiller
    release: istio
    istio: galley
spec:
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: galley
        chart: galley
        heritage: Tiller
        release: istio
        istio: galley
      annotations:
        seccomp.security.alpha.kubernetes.io/pod: 'docker/default'
        sidecar.istio.io/inject: "false"
    spec:
      serviceAccountName: istio-galley-service-account
      containers:
        - name: galley
          image: "gke.gcr.io/istio/galley:1.1.13-gke.0"
          imagePullPolicy: IfNotPresent
          ports:
          - containerPort: 443
          - containerPort: 15014
          - containerPort: 9901
          command:
          - /usr/local/bin/galley
          - server
          - --meshConfigFile=/etc/mesh-config/mesh
          - --livenessProbeInterval=1s
          - --livenessProbePath=/healthliveness
          - --readinessProbePath=/healthready
          - --readinessProbeInterval=1s
          - --deployment-namespace=istio-system
          - --insecure=false
          - --validation-webhook-config-file
          - /etc/config/validatingwebhookconfiguration.yaml
          - --monitoringPort=15014
          - --log_output_level=default:info
          volumeMounts:
          - name: certs
            mountPath: /etc/certs
            readOnly: true
          - name: config
            mountPath: /etc/config
            readOnly: true
          - name: mesh-config
            mountPath: /etc/mesh-config
            readOnly: true
          livenessProbe:
            exec:
              command:
                - /usr/local/bin/galley
                - probe
                - --probe-path=/healthliveness
                - --interval=10s
            initialDelaySeconds: 5
            periodSeconds: 5
          readinessProbe:
            exec:
              command:
                - /usr/local/bin/galley
                - probe
                - --probe-path=/healthready
                - --interval=10s
            initialDelaySeconds: 5
            periodSeconds: 5
      volumes:
      - name: certs
        secret:
          secretName: istio.istio-galley-service-account
      - name: config
        configMap:
          name: istio-galley-configuration
      - name: mesh-config
        configMap:
          name: istio
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - amd64
                - ppc64le
                - s390x
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 2
            preference:
              matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - amd64
          - weight: 2
            preference:
              matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - ppc64le
          - weight: 2
            preference:
              matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - s390x

---
# Source: istio/charts/gateways/templates/deployment.yaml

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: istio-ingressgateway
  namespace: istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
    chart: gateways
    heritage: Tiller
    release: istio
    app: istio-ingressgateway
    istio: ingressgateway
spec:
  template:
    metadata:
      labels:
        chart: gateways
        heritage: Tiller
        release: istio
        app: istio-ingressgateway
        istio: ingressgateway
      annotations:
        seccomp.security.alpha.kubernetes.io/pod: 'docker/default'
        sidecar.istio.io/inject: "false"
    spec:
      serviceAccountName: istio-ingressgateway-service-account
      containers:
        - name: istio-proxy
          image: "gke.gcr.io/istio/proxyv2:1.1.13-gke.0"
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 15020
            - containerPort: 80
            - containerPort: 443
            - containerPort: 31400
            - containerPort: 15029
            - containerPort: 15030
            - containerPort: 15031
            - containerPort: 15032
            - containerPort: 15443
            - containerPort: 15090
              protocol: TCP
              name: http-envoy-prom
          args:
          - proxy
          - router
          - --domain
          - $(POD_NAMESPACE).svc.cluster.local
          - --log_output_level=default:info
          - --drainDuration
          - '45s' #drainDuration
          - --parentShutdownDuration
          - '1m0s' #parentShutdownDuration
          - --connectTimeout
          - '10s' #connectTimeout
          - --serviceCluster
          - istio-ingressgateway
          - --zipkinAddress
          - zipkin:9411
          - --proxyAdminPort
          - "15000"
          - --statusPort
          - "15020"
          - --controlPlaneAuthPolicy
          - MUTUAL_TLS
          - --discoveryAddress
          - istio-pilot:15011
          readinessProbe:
            failureThreshold: 30
            httpGet:
              path: /healthz/ready
              port: 15020
              scheme: HTTP
            initialDelaySeconds: 1
            periodSeconds: 2
            successThreshold: 1
            timeoutSeconds: 1
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: INSTANCE_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.podIP
          - name: HOST_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.hostIP
          - name: ISTIO_META_POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: ISTIO_META_CONFIG_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: ISTIO_META_ROUTER_MODE
            value: sni-dnat
          volumeMounts:
          - name: istio-certs
            mountPath: /etc/certs
            readOnly: true
          - name: ingressgateway-certs
            mountPath: "/etc/istio/ingressgateway-certs"
            readOnly: true
          - name: ingressgateway-ca-certs
            mountPath: "/etc/istio/ingressgateway-ca-certs"
            readOnly: true
      volumes:
      - name: istio-certs
        secret:
          secretName: istio.istio-ingressgateway-service-account
          optional: true
      - name: ingressgateway-certs
        secret:
          secretName: "istio-ingressgateway-certs"
          optional: true
      - name: ingressgateway-ca-certs
        secret:
          secretName: "istio-ingressgateway-ca-certs"
          optional: true
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - amd64
                - ppc64le
                - s390x
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 2
            preference:
              matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - amd64
          - weight: 2
            preference:
              matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - ppc64le
          - weight: 2
            preference:
              matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - s390x
---

---
# Source: istio/charts/mixer/templates/deployment.yaml

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: istio-policy
  namespace: istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
    app: istio-mixer
    chart: mixer
    heritage: Tiller
    release: istio
    istio: mixer
spec:
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      istio: mixer
      istio-mixer-type: policy
  template:
    metadata:
      labels:
        app: policy
        chart: mixer
        heritage: Tiller
        release: istio
        istio: mixer
        istio-mixer-type: policy
      annotations:
        seccomp.security.alpha.kubernetes.io/pod: 'docker/default'
        sidecar.istio.io/inject: "false"
    spec:
      serviceAccountName: istio-mixer-service-account
      volumes:
      - name: istio-certs
        secret:
          secretName: istio.istio-mixer-service-account
          optional: true
      - name: uds-socket
        emptyDir: {}
      - name: policy-adapter-secret
        secret:
          secretName: policy-adapter-secret
          optional: true
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - amd64
                - ppc64le
                - s390x
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 2
            preference:
              matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - amd64
          - weight: 2
            preference:
              matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - ppc64le
          - weight: 2
            preference:
              matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - s390x
      containers:
      - name: mixer
        image: "gke.gcr.io/istio/mixer:1.1.13-gke.0"
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 15014
        - containerPort: 42422
        args:
          - --monitoringPort=15014
          - --address
          - unix:///sock/mixer.socket
          - --log_output_level=default:info
          - --configStoreURL=mcps://istio-galley.istio-system.svc:9901
          - --configDefaultNamespace=istio-system
          - --useAdapterCRDs=true
          - --trace_zipkin_url=http://zipkin:9411/api/v1/spans
        env:
        - name: GODEBUG
          value: "gctrace=1"
        - name: GOMAXPROCS
          value: "6"
        volumeMounts:
        - name: istio-certs
          mountPath: /etc/certs
          readOnly: true
        - name: uds-socket
          mountPath: /sock
        livenessProbe:
          httpGet:
            path: /version
            port: 15014
          initialDelaySeconds: 5
          periodSeconds: 5
      - name: istio-proxy
        image: "gke.gcr.io/istio/proxyv2:1.1.13-gke.0"
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 9091
        - containerPort: 15004
        - containerPort: 15090
          protocol: TCP
          name: http-envoy-prom
        args:
        - proxy
        - --domain
        - $(POD_NAMESPACE).svc.cluster.local
        - --serviceCluster
        - istio-policy
        - --templateFile
        - /etc/istio/proxy/envoy_policy.yaml.tmpl
        - --controlPlaneAuthPolicy
        - MUTUAL_TLS
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: INSTANCE_IP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.podIP
        volumeMounts:
        - name: istio-certs
          mountPath: /etc/certs
          readOnly: true
        - name: uds-socket
          mountPath: /sock
        - name: policy-adapter-secret
          mountPath: /var/run/secrets/istio.io/policy/adapter
          readOnly: true

---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: istio-telemetry
  namespace: istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
    app: istio-mixer
    chart: mixer
    heritage: Tiller
    release: istio
    istio: mixer
spec:
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      istio: mixer
      istio-mixer-type: telemetry
  template:
    metadata:
      labels:
        app: telemetry
        chart: mixer
        heritage: Tiller
        release: istio
        istio: mixer
        istio-mixer-type: telemetry
      annotations:
        seccomp.security.alpha.kubernetes.io/pod: 'docker/default'
        sidecar.istio.io/inject: "false"
    spec:
      serviceAccountName: istio-mixer-service-account
      volumes:
      - name: istio-certs
        secret:
          secretName: istio.istio-mixer-service-account
          optional: true
      - name: uds-socket
        emptyDir: {}
      - name: telemetry-adapter-secret
        secret:
          secretName: telemetry-adapter-secret
          optional: true
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - amd64
                - ppc64le
                - s390x
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 2
            preference:
              matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - amd64
          - weight: 2
            preference:
              matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - ppc64le
          - weight: 2
            preference:
              matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - s390x
      containers:
      - name: mixer
        image: "gke.gcr.io/istio/mixer:1.1.13-gke.0"
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 15014
        - containerPort: 42422
        args:
          - --monitoringPort=15014
          - --address
          - unix:///sock/mixer.socket
          - --log_output_level=default:info
          - --configStoreURL=mcps://istio-galley.istio-system.svc:9901
          - --certFile=/etc/certs/cert-chain.pem
          - --keyFile=/etc/certs/key.pem
          - --caCertFile=/etc/certs/root-cert.pem
          - --configDefaultNamespace=istio-system
          - --useAdapterCRDs=true
          - --trace_zipkin_url=http://zipkin:9411/api/v1/spans
          - --averageLatencyThreshold
          - 5000ms
          - --loadsheddingMode
          - enforce
        env:
        - name: GODEBUG
          value: "gctrace=1"
        - name: GOMAXPROCS
          value: "6"
        volumeMounts:
        - name: istio-certs
          mountPath: /etc/certs
          readOnly: true
        - name: telemetry-adapter-secret
          mountPath: /var/run/secrets/istio.io/telemetry/adapter
          readOnly: true
        - name: uds-socket
          mountPath: /sock
        livenessProbe:
          httpGet:
            path: /version
            port: 15014
          initialDelaySeconds: 5
          periodSeconds: 5
      - name: istio-proxy
        image: "gke.gcr.io/istio/proxyv2:1.1.13-gke.0"
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 9091
        - containerPort: 15004
        - containerPort: 15090
          protocol: TCP
          name: http-envoy-prom
        args:
        - proxy
        - --domain
        - $(POD_NAMESPACE).svc.cluster.local
        - --serviceCluster
        - istio-telemetry
        - --templateFile
        - /etc/istio/proxy/envoy_telemetry.yaml.tmpl
        - --controlPlaneAuthPolicy
        - MUTUAL_TLS
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: INSTANCE_IP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.podIP
        volumeMounts:
        - name: istio-certs
          mountPath: /etc/certs
          readOnly: true
        - name: uds-socket
          mountPath: /sock

---

---
# Source: istio/charts/pilot/templates/deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: istio-pilot
  namespace: istio-system
  # TODO: default template doesn't have this, which one is right ?
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
    app: pilot
    chart: pilot
    heritage: Tiller
    release: istio
    istio: pilot
  annotations:
    checksum/config-volume: f8da08b6b8c170dde721efd680270b2901e750d4aa186ebb6c22bef5b78a43f9
spec:
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      istio: pilot
  template:
    metadata:
      labels:
        app: pilot
        chart: pilot
        heritage: Tiller
        release: istio
        istio: pilot
      annotations:
        seccomp.security.alpha.kubernetes.io/pod: 'docker/default'
        sidecar.istio.io/inject: "false"
    spec:
      serviceAccountName: istio-pilot-service-account
      containers:
        - name: discovery
          image: "gke.gcr.io/istio/pilot:1.1.13-gke.0"
          imagePullPolicy: IfNotPresent
          args:
          - "discovery"
          - --monitoringAddr=:15014
          - --log_output_level=default:info
          - --domain
          - cluster.local
          - --keepaliveMaxServerConnectionAge
          - "30m"
          ports:
          - containerPort: 8080
          - containerPort: 15010
          readinessProbe:
            httpGet:
              path: /ready
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 30
            timeoutSeconds: 5
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: GODEBUG
            value: "gctrace=1"
          - name: PILOT_PUSH_THROTTLE
            value: "100"
          - name: PILOT_TRACE_SAMPLING
            value: "1"
          - name: PILOT_DISABLE_XDS_MARSHALING_TO_ANY
            value: "1"
          volumeMounts:
          - name: config-volume
            mountPath: /etc/istio/config
          - name: istio-certs
            mountPath: /etc/certs
            readOnly: true
        - name: istio-proxy
          image: "gke.gcr.io/istio/proxyv2:1.1.13-gke.0"
          imagePullPolicy: IfNotPresent
          ports:
          - containerPort: 15003
          - containerPort: 15005
          - containerPort: 15007
          - containerPort: 15011
          args:
          - proxy
          - --domain
          - $(POD_NAMESPACE).svc.cluster.local
          - --serviceCluster
          - istio-pilot
          - --templateFile
          - /etc/istio/proxy/envoy_pilot.yaml.tmpl
          - --controlPlaneAuthPolicy
          - MUTUAL_TLS
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: INSTANCE_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.podIP
          volumeMounts:
          - name: istio-certs
            mountPath: /etc/certs
            readOnly: true
      volumes:
      - name: config-volume
        configMap:
          name: istio
      - name: istio-certs
        secret:
          secretName: istio.istio-pilot-service-account
          optional: true
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - amd64
                - ppc64le
                - s390x
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 2
            preference:
              matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - amd64
          - weight: 2
            preference:
              matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - ppc64le
          - weight: 2
            preference:
              matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - s390x

---
# Source: istio/charts/security/templates/deployment.yaml
# istio CA watching all namespaces
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: istio-citadel
  namespace: istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
    app: security
    chart: security
    heritage: Tiller
    release: istio
    istio: citadel
spec:
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: security
        chart: security
        heritage: Tiller
        release: istio
        istio: citadel
      annotations:
        seccomp.security.alpha.kubernetes.io/pod: 'docker/default'
        sidecar.istio.io/inject: "false"
    spec:
      serviceAccountName: istio-citadel-service-account
      containers:
        - name: citadel
          image: "gke.gcr.io/istio/citadel:1.1.13-gke.0"
          imagePullPolicy: IfNotPresent
          args:
            - --append-dns-names=true
            - --grpc-port=8060
            - --grpc-hostname=citadel
            - --citadel-storage-namespace=istio-system
            - --custom-dns-names=istio-pilot-service-account.istio-system:istio-pilot.istio-system
            - --monitoring-port=15014
            - --self-signed-ca=true
          livenessProbe:
            httpGet:
              path: /version
              port: 15014
            initialDelaySeconds: 5
            periodSeconds: 5
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - amd64
                - ppc64le
                - s390x
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 2
            preference:
              matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - amd64
          - weight: 2
            preference:
              matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - ppc64le
          - weight: 2
            preference:
              matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - s390x

---
# Source: istio/charts/sidecarInjectorWebhook/templates/deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: istio-sidecar-injector
  namespace: istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
    app: sidecarInjectorWebhook
    chart: sidecarInjectorWebhook
    heritage: Tiller
    release: istio
    istio: sidecar-injector
spec:
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: sidecarInjectorWebhook
        chart: sidecarInjectorWebhook
        heritage: Tiller
        release: istio
        istio: sidecar-injector
      annotations:
        seccomp.security.alpha.kubernetes.io/pod: 'docker/default'
        sidecar.istio.io/inject: "false"
    spec:
      serviceAccountName: istio-sidecar-injector-service-account
      containers:
        - name: sidecar-injector-webhook
          image: "gke.gcr.io/istio/sidecar_injector:1.1.13-gke.0"
          imagePullPolicy: IfNotPresent
          args:
            - --caCertFile=/etc/istio/certs/root-cert.pem
            - --tlsCertFile=/etc/istio/certs/cert-chain.pem
            - --tlsKeyFile=/etc/istio/certs/key.pem
            - --injectConfig=/etc/istio/inject/config
            - --meshConfig=/etc/istio/config/mesh
            - --healthCheckInterval=2s
            - --healthCheckFile=/health
          volumeMounts:
          - name: config-volume
            mountPath: /etc/istio/config
            readOnly: true
          - name: certs
            mountPath: /etc/istio/certs
            readOnly: true
          - name: inject-config
            mountPath: /etc/istio/inject
            readOnly: true
          livenessProbe:
            exec:
              command:
                - /usr/local/bin/sidecar-injector
                - probe
                - --probe-path=/health
                - --interval=4s
            initialDelaySeconds: 4
            periodSeconds: 4
          readinessProbe:
            exec:
              command:
                - /usr/local/bin/sidecar-injector
                - probe
                - --probe-path=/health
                - --interval=4s
            initialDelaySeconds: 4
            periodSeconds: 4
      volumes:
      - name: config-volume
        configMap:
          name: istio
      - name: certs
        secret:
          secretName: istio.istio-sidecar-injector-service-account
      - name: inject-config
        configMap:
          name: istio-sidecar-injector
          items:
          - key: config
            path: config
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - amd64
                - ppc64le
                - s390x
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 2
            preference:
              matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - amd64
          - weight: 2
            preference:
              matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - ppc64le
          - weight: 2
            preference:
              matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - s390x

---
# Source: istio/charts/gateways/templates/autoscale.yaml

apiVersion: autoscaling/v2beta1
kind: HorizontalPodAutoscaler
metadata:
  name: istio-ingressgateway
  namespace: istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: EnsureExists
    app: ingressgateway
    chart: gateways
    heritage: Tiller
    release: istio
spec:
  maxReplicas: 5
  minReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1beta1
    kind: Deployment
    name: istio-ingressgateway
  metrics:
    - type: Resource
      resource:
        name: cpu
        targetAverageUtilization: 80
---

---
# Source: istio/charts/mixer/templates/autoscale.yaml

apiVersion: autoscaling/v2beta1
kind: HorizontalPodAutoscaler
metadata:
  name: istio-policy
  namespace: istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: EnsureExists
    app: mixer
    chart: mixer
    heritage: Tiller
    release: istio
spec:
    maxReplicas: 5
    minReplicas: 1
    scaleTargetRef:
      apiVersion: apps/v1beta1
      kind: Deployment
      name: istio-policy
    metrics:
    - type: Resource
      resource:
        name: cpu
        targetAverageUtilization: 80
---
apiVersion: autoscaling/v2beta1
kind: HorizontalPodAutoscaler
metadata:
  name: istio-telemetry
  namespace: istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: EnsureExists
    app: mixer
    chart: mixer
    heritage: Tiller
    release: istio
spec:
    maxReplicas: 5
    minReplicas: 1
    scaleTargetRef:
      apiVersion: apps/v1beta1
      kind: Deployment
      name: istio-telemetry
    metrics:
    - type: Resource
      resource:
        name: cpu
        targetAverageUtilization: 80
---

---
# Source: istio/charts/pilot/templates/autoscale.yaml

apiVersion: autoscaling/v2beta1
kind: HorizontalPodAutoscaler
metadata:
  name: istio-pilot
  namespace: istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: EnsureExists
    app: pilot
    chart: pilot
    heritage: Tiller
    release: istio
spec:
  maxReplicas: 5
  minReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1beta1
    kind: Deployment
    name: istio-pilot
  metrics:
  - type: Resource
    resource:
      name: cpu
      targetAverageUtilization: 80
---

---
# Source: istio/charts/sidecarInjectorWebhook/templates/mutatingwebhook.yaml
apiVersion: admissionregistration.k8s.io/v1beta1
kind: MutatingWebhookConfiguration
metadata:
  name: istio-sidecar-injector
  namespace: istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
    app: sidecarInjectorWebhook
    chart: sidecarInjectorWebhook
    heritage: Tiller
    release: istio
webhooks:
  - name: sidecar-injector.istio.io
    clientConfig:
      service:
        name: istio-sidecar-injector
        namespace: istio-system
        path: "/inject"
      caBundle: ""
    rules:
      - operations: [ "CREATE" ]
        apiGroups: [""]
        apiVersions: ["v1"]
        resources: ["pods"]
    failurePolicy: Fail
    namespaceSelector:
      matchLabels:
        istio-injection: enabled


---
# Source: istio/charts/galley/templates/validatingwebhookconfiguration.yaml.tpl


---
# Source: istio/charts/gateways/templates/preconfigured.yaml


---
# Source: istio/charts/pilot/templates/meshexpansion.yaml



---
# Source: istio/charts/security/templates/enable-mesh-mtls.yaml


---
# Source: istio/charts/security/templates/enable-mesh-permissive.yaml


---
# Source: istio/charts/security/templates/meshexpansion.yaml


---
# Source: istio/charts/security/templates/tests/test-citadel-connection.yaml


---
# Source: istio/templates/endpoints.yaml


---
# Source: istio/templates/install-custom-resources.sh.tpl


---
# Source: istio/templates/service.yaml


---
# Source: istio/charts/mixer/templates/config.yaml

apiVersion: "config.istio.io/v1alpha2"
kind: attributemanifest
metadata:
  name: istioproxy
  namespace: istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
    app: mixer
    chart: mixer
    heritage: Tiller
    release: istio
spec:
  attributes:
    origin.ip:
      valueType: IP_ADDRESS
    origin.uid:
      valueType: STRING
    origin.user:
      valueType: STRING
    request.headers:
      valueType: STRING_MAP
    request.id:
      valueType: STRING
    request.host:
      valueType: STRING
    request.method:
      valueType: STRING
    request.path:
      valueType: STRING
    request.url_path:
      valueType: STRING
    request.query_params:
      valueType: STRING_MAP
    request.reason:
      valueType: STRING
    request.referer:
      valueType: STRING
    request.scheme:
      valueType: STRING
    request.total_size:
      valueType: INT64
    request.size:
      valueType: INT64
    request.time:
      valueType: TIMESTAMP
    request.useragent:
      valueType: STRING
    response.code:
      valueType: INT64
    response.duration:
      valueType: DURATION
    response.headers:
      valueType: STRING_MAP
    response.total_size:
      valueType: INT64
    response.size:
      valueType: INT64
    response.time:
      valueType: TIMESTAMP
    response.grpc_status:
      valueType: STRING
    response.grpc_message:
      valueType: STRING
    source.uid:
      valueType: STRING
    source.user: # DEPRECATED
      valueType: STRING
    source.principal:
      valueType: STRING
    destination.uid:
      valueType: STRING
    destination.principal:
      valueType: STRING
    destination.port:
      valueType: INT64
    connection.event:
      valueType: STRING
    connection.id:
      valueType: STRING
    connection.received.bytes:
      valueType: INT64
    connection.received.bytes_total:
      valueType: INT64
    connection.sent.bytes:
      valueType: INT64
    connection.sent.bytes_total:
      valueType: INT64
    connection.duration:
      valueType: DURATION
    connection.mtls:
      valueType: BOOL
    connection.requested_server_name:
      valueType: STRING
    context.protocol:
      valueType: STRING
    context.proxy_error_code:
      valueType: STRING
    context.timestamp:
      valueType: TIMESTAMP
    context.time:
      valueType: TIMESTAMP
    # Deprecated, kept for compatibility
    context.reporter.local:
      valueType: BOOL
    context.reporter.kind:
      valueType: STRING
    context.reporter.uid:
      valueType: STRING
    api.service:
      valueType: STRING
    api.version:
      valueType: STRING
    api.operation:
      valueType: STRING
    api.protocol:
      valueType: STRING
    request.auth.principal:
      valueType: STRING
    request.auth.audiences:
      valueType: STRING
    request.auth.presenter:
      valueType: STRING
    request.auth.claims:
      valueType: STRING_MAP
    request.auth.raw_claims:
      valueType: STRING
    request.api_key:
      valueType: STRING
    rbac.permissive.response_code:
      valueType: STRING
    rbac.permissive.effective_policy_id:
      valueType: STRING
    check.error_code:
      valueType: INT64
    check.error_message:
      valueType: STRING
    check.cache_hit:
      valueType: BOOL
    quota.cache_hit:
      valueType: BOOL

---
apiVersion: "config.istio.io/v1alpha2"
kind: attributemanifest
metadata:
  name: kubernetes
  namespace: istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
    app: mixer
    chart: mixer
    heritage: Tiller
    release: istio
spec:
  attributes:
    source.ip:
      valueType: IP_ADDRESS
    source.labels:
      valueType: STRING_MAP
    source.metadata:
      valueType: STRING_MAP
    source.name:
      valueType: STRING
    source.namespace:
      valueType: STRING
    source.owner:
      valueType: STRING
    source.serviceAccount:
      valueType: STRING
    source.services:
      valueType: STRING
    source.workload.uid:
      valueType: STRING
    source.workload.name:
      valueType: STRING
    source.workload.namespace:
      valueType: STRING
    destination.ip:
      valueType: IP_ADDRESS
    destination.labels:
      valueType: STRING_MAP
    destination.metadata:
      valueType: STRING_MAP
    destination.owner:
      valueType: STRING
    destination.name:
      valueType: STRING
    destination.container.name:
      valueType: STRING
    destination.namespace:
      valueType: STRING
    destination.service.uid:
      valueType: STRING
    destination.service.name:
      valueType: STRING
    destination.service.namespace:
      valueType: STRING
    destination.service.host:
      valueType: STRING
    destination.serviceAccount:
      valueType: STRING
    destination.workload.uid:
      valueType: STRING
    destination.workload.name:
      valueType: STRING
    destination.workload.namespace:
      valueType: STRING
---
apiVersion: "config.istio.io/v1alpha2"
kind: handler
metadata:
  name: kubernetesenv
  namespace: istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
    app: mixer
    chart: mixer
    heritage: Tiller
    release: istio
spec:
  compiledAdapter: kubernetesenv
  params:
    # when running from mixer root, use the following config after adding a
    # symbolic link to a kubernetes config file via:
    #
    # $ ln -s ~/.kube/config mixer/adapter/kubernetes/kubeconfig
    #
    # kubeconfig_path: "mixer/adapter/kubernetes/kubeconfig"

---
apiVersion: "config.istio.io/v1alpha2"
kind: rule
metadata:
  name: kubeattrgenrulerule
  namespace: istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
    app: mixer
    chart: mixer
    heritage: Tiller
    release: istio
spec:
  actions:
  - handler: kubernetesenv
    instances:
    - attributes.kubernetes
---
apiVersion: "config.istio.io/v1alpha2"
kind: rule
metadata:
  name: tcpkubeattrgenrulerule
  namespace: istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
    app: mixer
    chart: mixer
    heritage: Tiller
    release: istio
spec:
  match: context.protocol == "tcp"
  actions:
  - handler: kubernetesenv
    instances:
    - attributes.kubernetes
---
apiVersion: "config.istio.io/v1alpha2"
kind: kubernetes
metadata:
  name: attributes
  namespace: istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
    app: mixer
    chart: mixer
    heritage: Tiller
    release: istio
spec:
  # Pass the required attribute data to the adapter
  source_uid: source.uid | ""
  source_ip: source.ip | ip("0.0.0.0") # default to unspecified ip addr
  destination_uid: destination.uid | ""
  destination_port: destination.port | 0
  attribute_bindings:
    # Fill the new attributes from the adapter produced output.
    # $out refers to an instance of OutputTemplate message
    source.ip: $out.source_pod_ip | ip("0.0.0.0")
    source.uid: $out.source_pod_uid | "unknown"
    source.labels: $out.source_labels | emptyStringMap()
    source.name: $out.source_pod_name | "unknown"
    source.namespace: $out.source_namespace | "default"
    source.owner: $out.source_owner | "unknown"
    source.serviceAccount: $out.source_service_account_name | "unknown"
    source.workload.uid: $out.source_workload_uid | "unknown"
    source.workload.name: $out.source_workload_name | "unknown"
    source.workload.namespace: $out.source_workload_namespace | "unknown"
    destination.ip: $out.destination_pod_ip | ip("0.0.0.0")
    destination.uid: $out.destination_pod_uid | "unknown"
    destination.labels: $out.destination_labels | emptyStringMap()
    destination.name: $out.destination_pod_name | "unknown"
    destination.container.name: $out.destination_container_name | "unknown"
    destination.namespace: $out.destination_namespace | "default"
    destination.owner: $out.destination_owner | "unknown"
    destination.serviceAccount: $out.destination_service_account_name | "unknown"
    destination.workload.uid: $out.destination_workload_uid | "unknown"
    destination.workload.name: $out.destination_workload_name | "unknown"
    destination.workload.namespace: $out.destination_workload_namespace | "unknown"
---
# Configuration needed by Mixer.
# Mixer cluster is delivered via CDS
# Specify mixer cluster settings
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: istio-policy
  namespace: istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
    app: mixer
    chart: mixer
    heritage: Tiller
    release: istio
spec:
  host: istio-policy.istio-system.svc.cluster.local
  trafficPolicy:
    portLevelSettings:
    - port:
        number: 15004
      tls:
        mode: ISTIO_MUTUAL
    connectionPool:
      http:
        http2MaxRequests: 10000
        maxRequestsPerConnection: 10000
---
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: istio-telemetry
  namespace: istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
    app: mixer
    chart: mixer
    heritage: Tiller
    release: istio
spec:
  host: istio-telemetry.istio-system.svc.cluster.local
  trafficPolicy:
    portLevelSettings:
    - port:
        number: 15004
      tls:
        mode: ISTIO_MUTUAL
    connectionPool:
      http:
        http2MaxRequests: 10000
        maxRequestsPerConnection: 10000
---

apiVersion: "config.istio.io/v1alpha2"
kind: stackdriver
metadata:
  name: handler
  namespace: istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
spec:
  pushInterval: 10s
  metricInfo:
    server-request-count.metric.istio-system:
      # Due to a bug in gogoproto deserialization, Enums in maps must be
      # specified by their integer value, not variant name. See
      # https://github.com/googleapis/googleapis/blob/master/google/api/metric.proto
      # MetricKind and ValueType for the values to provide.
      kind: 3 # CUMULATIVE
      value: 2 # INT64
      metric_type: "istio.io/service/server/request_count"
    server-request-bytes.metric.istio-system:
      kind: 3 # CUMULATIVE
      value: 5 # DISTRIBUTION
      buckets:
        exponentialBuckets:
          numFiniteBuckets: 20
          scale: 1
          growthFactor: 2
      metric_type: "istio.io/service/server/request_bytes"
    server-response-bytes.metric.istio-system:
      kind: 3 # CUMULATIVE
      value: 5 # DISTRIBUTION
      buckets:
        exponentialBuckets:
          numFiniteBuckets: 20
          scale: 1
          growthFactor: 2
      metric_type: "istio.io/service/server/response_bytes"
    server-response-latencies.metric.istio-system:
      kind: 3 # CUMULATIVE
      value: 5 # DISTRIBUTION
      buckets:
        exponentialBuckets:
          numFiniteBuckets: 20
          scale: 1
          growthFactor: 2
      metric_type: "istio.io/service/server/response_latencies"
    server-received-bytes-count.metric.istio-system:
      kind: 3 # CUMULATIVE
      value: 2 # INT64
      metric_type: "istio.io/service/server/received_bytes_count"
    server-sent-bytes-count.metric.istio-system:
      kind: 3 # CUMULATIVE
      value: 2 # INT64
      metric_type: "istio.io/service/server/sent_bytes_count"
    client-request-count.metric.istio-system:
      kind: 3 # CUMULATIVE
      value: 2 # INT64
      metric_type: "istio.io/service/client/request_count"
    client-request-bytes.metric.istio-system:
      kind: 3 # CUMULATIVE
      value: 5 # DISTRIBUTION
      buckets:
        exponentialBuckets:
          numFiniteBuckets: 20
          scale: 1
          growthFactor: 2
      metric_type: "istio.io/service/client/request_bytes"
    client-response-bytes.metric.istio-system:
      kind: 3 # CUMULATIVE
      value: 5 # DISTRIBUTION
      buckets:
        exponentialBuckets:
          numFiniteBuckets: 20
          scale: 1
          growthFactor: 2
      metric_type: "istio.io/service/client/response_bytes"
    client-roundtrip-latencies.metric.istio-system:
      kind: 3 # CUMULATIVE
      value: 5 # DISTRIBUTION
      buckets:
        exponentialBuckets:
          numFiniteBuckets: 20
          scale: 1
          growthFactor: 2
      metric_type: "istio.io/service/client/roundtrip_latencies"
    client-received-bytes-count.metric.istio-system:
      kind: 3 # CUMULATIVE
      value: 2 # INT64
      metric_type: "istio.io/service/client/received_bytes_count"
    client-sent-bytes-count.metric.istio-system:
      kind: 3 # CUMULATIVE
      value: 2 # INT64
      metric_type: "istio.io/service/client/sent_bytes_count"
    mixer-request-count.metric.istio-system:
      kind: 3
      metric_type: container.googleapis.com/internal/addons/istio/mixer_request_count
      value: 2
    mixer-request-latency.metric.istio-system:
      buckets:
        exponentialBuckets:
          growthFactor: 2
          numFiniteBuckets: 20
          scale: 1
      kind: 3
      metric_type: container.googleapis.com/internal/addons/istio/mixer_request_latency
      value: 5
  logInfo:
    server-accesslog-stackdriver.logentry.istio-system:
      labelNames:
      - source_uid
      - source_ip
      - source_app
      - source_principal
      - source_name
      - source_workload
      - source_namespace
      - source_owner
      - destination_uid
      - destination_app
      - destination_ip
      - destination_service_host
      - destination_service_name
      - destination_service_namespace
      - destination_workload
      - destination_name
      - destination_namespace
      - destination_owner
      - destination_principal
      - api_name
      - api_version
      - api_claims
      - api_key
      - request_operation
      - protocol
      - method
      - url
      - response_code
      - response_size
      - request_size
      - request_id
      - client_trace_id
      - latency
      - service_authentication_policy
      - user_agent
      - response_timestamp
      - received_bytes
      - sent_bytes
      - referer
    server-tcp-accesslog-stackdriver.logentry.istio-system:
      labelNames:
      - connection_id
      - connection_event
      - source_uid
      - source_ip
      - source_app
      - source_principal
      - source_name
      - source_workload
      - source_namespace
      - source_owner
      - destination_uid
      - destination_app
      - destination_ip
      - destination_service_host
      - destination_service_name
      - destination_service_namespace
      - destination_workload
      - destination_name
      - destination_namespace
      - destination_owner
      - destination_principal
      - protocol
      - connction_duration
      - service_authentication_policy
      - received_bytes
      - sent_bytes
      - total_received_bytes
      - total_sent_bytes
  trace:
    sampleProbability: 1
---
#################################################
############## Metric Config ####################
#################################################
apiVersion: "config.istio.io/v1alpha2"
kind: rule
metadata:
  name: stackdriver-server
  namespace: istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
spec:
  match: (context.protocol == "http" || context.protocol == "grpc") && (context.reporter.kind | "inbound" == "inbound")
  actions:
  - handler: handler.stackdriver
    instances:
    - server-request-count.metric
    - server-request-bytes.metric
    - server-response-bytes.metric
    - server-response-latencies.metric
---
apiVersion: "config.istio.io/v1alpha2"
kind: rule
metadata:
  name: stackdriver-client
  namespace: istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
spec:
  match: (context.protocol == "http" || context.protocol == "grpc") && (context.reporter.kind | "inbound" == "outbound")
  actions:
  - handler: handler.stackdriver
    instances:
    - client-request-count.metric
    - client-request-bytes.metric
    - client-response-bytes.metric
    - client-roundtrip-latencies.metric
---
apiVersion: "config.istio.io/v1alpha2"
kind: rule
metadata:
  name: stackdriver-tcp-server
  namespace: istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
spec:
  match: context.protocol == "tcp" && (context.reporter.kind | "inbound" == "inbound")
  actions:
  - handler: handler.stackdriver
    instances:
    - server-received-bytes-count.metric
    - server-sent-bytes-count.metric
---
apiVersion: "config.istio.io/v1alpha2"
kind: rule
metadata:
  name: stackdriver-tcp-client
  namespace: istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
spec:
  match: context.protocol == "tcp" && (context.reporter.kind | "inbound" == "outbound")
  actions:
  - handler: handler.stackdriver
    instances:
    - client-received-bytes-count.metric
    - client-sent-bytes-count.metric
---
apiVersion: "config.istio.io/v1alpha2"
kind: metric
metadata:
  name: server-request-count
  namespace: istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
spec:
  value: "1"
  dimensions:
    destination_service_name: destination.service.name | "unknown"
    destination_service_namespace: destination.service.namespace | "unknown"
    destination_port: destination.port | 0
    request_operation: conditional((context.protocol | "unknown") == "grpc", request.path | "unknown", request.method | "unknown")
    request_protocol: context.protocol | "unknown"
    api_version: api.version | "unknown"
    api_name: api.service | "unknown"
    response_code: response.code | 0
    service_authentication_policy: conditional((context.reporter.kind | "inbound") == "outbound", "unknown", conditional(connection.mtls | false, "mutual_tls", "none"))
    source_workload_namespace: source.workload.namespace | "unknown"
    source_workload_name: source.workload.name | "unknown"
    source_owner: source.owner | "unknown"
    destination_workload_namespace: destination.workload.namespace | "unknown"
    destination_workload_name: destination.workload.name | "unknown"
    destination_owner: destination.owner | "unknown"
    destination_principal: destination.principal | "unknown"
    source_principal: source.principal | "unknown"
  monitoredResourceType: '"k8s_container"'
  monitoredResourceDimensions:
    project_id: '""'
    cluster_name: '""'
    namespace_name: destination.workload.namespace | "unknown"
    location: '""'
    container_name: conditional((destination.name | "unknown").startsWith("istio-telemetry") || (destination.name | "unknown").startsWith("istio-policy"), "mixer", destination.container.name | "unknown")
    pod_name: destination.name | "unknown"
---
apiVersion: "config.istio.io/v1alpha2"
kind: metric
metadata:
  name: client-request-count
  namespace: istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
spec:
  value: "1"
  dimensions:
    destination_service_name: destination.service.name | "unknown"
    destination_service_namespace: destination.service.namespace | "unknown"
    destination_port: destination.port | 0
    request_operation: conditional((context.protocol | "unknown") == "grpc", request.path | "unknown", request.method | "unknown")
    request_protocol: context.protocol | "unknown"
    api_version: api.version | "unknown"
    api_name: api.service | "unknown"
    response_code: response.code | 0
    service_authentication_policy: conditional((context.reporter.kind | "inbound") == "outbound", "unknown", conditional(connection.mtls | false, "mutual_tls", "none"))
    source_workload_namespace: source.workload.namespace | "unknown"
    source_workload_name: source.workload.name | "unknown"
    source_owner: source.owner | "unknown"
    destination_workload_namespace: destination.workload.namespace | "unknown"
    destination_workload_name: destination.workload.name | "unknown"
    destination_owner: destination.owner | "unknown"
    destination_principal: destination.principal | "unknown"
    source_principal: source.principal | "unknown"
  monitoredResourceType: '"k8s_pod"'
  monitoredResourceDimensions:
    project_id: '""'
    cluster_name: '""'
    namespace_name: source.workload.namespace | "unknown"
    location: '""'
    pod_name: source.name | "unknown"
---
apiVersion: "config.istio.io/v1alpha2"
kind: metric
metadata:
  name: server-request-bytes
  namespace: istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
spec:
  value: request.total_size
  dimensions:
    destination_service_name: destination.service.name | "unknown"
    destination_service_namespace: destination.service.namespace | "unknown"
    destination_port: destination.port | 0
    request_operation: conditional((context.protocol | "unknown") == "grpc", request.path | "unknown", request.method | "unknown")
    request_protocol: context.protocol | "unknown"
    api_version: api.version | "unknown"
    api_name: api.service | "unknown"
    response_code: response.code | 0
    service_authentication_policy: conditional((context.reporter.kind | "inbound") == "outbound", "unknown", conditional(connection.mtls | false, "mutual_tls", "none"))
    source_workload_namespace: source.workload.namespace | "unknown"
    source_workload_name: source.workload.name | "unknown"
    source_owner: source.owner | "unknown"
    destination_workload_namespace: destination.workload.namespace | "unknown"
    destination_workload_name: destination.workload.name | "unknown"
    destination_owner: destination.owner | "unknown"
    destination_principal: destination.principal | "unknown"
    source_principal: source.principal | "unknown"
  monitoredResourceType: '"k8s_container"'
  monitoredResourceDimensions:
    project_id: '""'
    cluster_name: '""'
    namespace_name: destination.workload.namespace | "unknown"
    location: '""'
    container_name: conditional((destination.name | "unknown").startsWith("istio-telemetry") || (destination.name | "unknown").startsWith("istio-policy"), "mixer", destination.container.name | "unknown")
    pod_name: destination.name | "unknown"
---
apiVersion: "config.istio.io/v1alpha2"
kind: metric
metadata:
  name: client-request-bytes
  namespace: istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
spec:
  value: request.total_size
  dimensions:
    destination_service_name: destination.service.name | "unknown"
    destination_service_namespace: destination.service.namespace | "unknown"
    destination_port: destination.port | 0
    request_operation: conditional((context.protocol | "unknown") == "grpc", request.path | "unknown", request.method | "unknown")
    request_protocol: context.protocol | "unknown"
    api_version: api.version | "unknown"
    api_name: api.service | "unknown"
    response_code: response.code | 0
    service_authentication_policy: conditional((context.reporter.kind | "inbound") == "outbound", "unknown", conditional(connection.mtls | false, "mutual_tls", "none"))
    source_workload_namespace: source.workload.namespace | "unknown"
    source_workload_name: source.workload.name | "unknown"
    source_owner: source.owner | "unknown"
    destination_workload_namespace: destination.workload.namespace | "unknown"
    destination_workload_name: destination.workload.name | "unknown"
    destination_owner: destination.owner | "unknown"
    destination_principal: destination.principal | "unknown"
    source_principal: source.principal | "unknown"
  monitoredResourceType: '"k8s_pod"'
  monitoredResourceDimensions:
    project_id: '""'
    cluster_name: '""'
    namespace_name: source.workload.namespace | "unknown"
    location: '""'
    pod_name: source.name | "unknown"
---
apiVersion: "config.istio.io/v1alpha2"
kind: metric
metadata:
  name: server-response-bytes
  namespace: istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
spec:
  value: response.total_size
  dimensions:
    destination_service_name: destination.service.name | "unknown"
    destination_service_namespace: destination.service.namespace | "unknown"
    destination_port: destination.port | 0
    request_operation: conditional((context.protocol | "unknown") == "grpc", request.path | "unknown", request.method | "unknown")
    request_protocol: context.protocol | "unknown"
    api_version: api.version | "unknown"
    api_name: api.service | "unknown"
    response_code: response.code | 0
    service_authentication_policy: conditional((context.reporter.kind | "inbound") == "outbound", "unknown", conditional(connection.mtls | false, "mutual_tls", "none"))
    source_workload_namespace: source.workload.namespace | "unknown"
    source_workload_name: source.workload.name | "unknown"
    source_owner: source.owner | "unknown"
    destination_workload_namespace: destination.workload.namespace | "unknown"
    destination_workload_name: destination.workload.name | "unknown"
    destination_owner: destination.owner | "unknown"
    destination_principal: destination.principal | "unknown"
    source_principal: source.principal | "unknown"
  monitoredResourceType: '"k8s_container"'
  monitoredResourceDimensions:
    project_id: '""'
    cluster_name: '""'
    namespace_name: destination.workload.namespace | "unknown"
    location: '""'
    container_name: conditional((destination.name | "unknown").startsWith("istio-telemetry") || (destination.name | "unknown").startsWith("istio-policy"), "mixer", destination.container.name | "unknown")
    pod_name: destination.name | "unknown"
---
apiVersion: "config.istio.io/v1alpha2"
kind: metric
metadata:
  name: client-response-bytes
  namespace: istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
spec:
  value: response.total_size
  dimensions:
    destination_service_name: destination.service.name | "unknown"
    destination_service_namespace: destination.service.namespace | "unknown"
    destination_port: destination.port | 0
    request_operation: conditional((context.protocol | "unknown") == "grpc", request.path | "unknown", request.method | "unknown")
    request_protocol: context.protocol | "unknown"
    api_version: api.version | "unknown"
    api_name: api.service | "unknown"
    response_code: response.code | 0
    service_authentication_policy: conditional((context.reporter.kind | "inbound") == "outbound", "unknown", conditional(connection.mtls | false, "mutual_tls", "none"))
    source_workload_namespace: source.workload.namespace | "unknown"
    source_workload_name: source.workload.name | "unknown"
    source_owner: source.owner | "unknown"
    destination_workload_namespace: destination.workload.namespace | "unknown"
    destination_workload_name: destination.workload.name | "unknown"
    destination_owner: destination.owner | "unknown"
    destination_principal: destination.principal | "unknown"
    source_principal: source.principal | "unknown"
  monitoredResourceType: '"k8s_pod"'
  monitoredResourceDimensions:
    project_id: '""'
    cluster_name: '""'
    namespace_name: source.workload.namespace | "unknown"
    location: '""'
    pod_name: source.name | "unknown"
---
apiVersion: "config.istio.io/v1alpha2"
kind: metric
metadata:
  name: server-response-latencies
  namespace: istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
spec:
  value: response.duration
  dimensions:
    destination_service_name: destination.service.name | "unknown"
    destination_service_namespace: destination.service.namespace | "unknown"
    destination_port: destination.port | 0
    request_operation: conditional((context.protocol | "unknown") == "grpc", request.path | "unknown", request.method | "unknown")
    request_protocol: context.protocol | "unknown"
    api_version: api.version | "unknown"
    api_name: api.service | "unknown"
    response_code: response.code | 0
    service_authentication_policy: conditional((context.reporter.kind | "inbound") == "outbound", "unknown", conditional(connection.mtls | false, "mutual_tls", "none"))
    source_workload_namespace: source.workload.namespace | "unknown"
    source_workload_name: source.workload.name | "unknown"
    source_owner: source.owner | "unknown"
    destination_workload_namespace: destination.workload.namespace | "unknown"
    destination_workload_name: destination.workload.name | "unknown"
    destination_owner: destination.owner | "unknown"
    destination_principal: destination.principal | "unknown"
    source_principal: source.principal | "unknown"
  monitoredResourceType: '"k8s_container"'
  monitoredResourceDimensions:
    project_id: '""'
    cluster_name: '""'
    namespace_name: destination.workload.namespace | "unknown"
    location: '""'
    container_name: conditional((destination.name | "unknown").startsWith("istio-telemetry") || (destination.name | "unknown").startsWith("istio-policy"), "mixer", destination.container.name | "unknown")
    pod_name: destination.name | "unknown"
---
apiVersion: "config.istio.io/v1alpha2"
kind: metric
metadata:
  name: client-roundtrip-latencies
  namespace: istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
spec:
  value: response.duration
  dimensions:
    destination_service_name: destination.service.name | "unknown"
    destination_service_namespace: destination.service.namespace | "unknown"
    destination_port: destination.port | 0
    request_operation: conditional((context.protocol | "unknown") == "grpc", request.path | "unknown", request.method | "unknown")
    request_protocol: context.protocol | "unknown"
    api_version: api.version | "unknown"
    api_name: api.service | "unknown"
    response_code: response.code | 0
    service_authentication_policy: conditional((context.reporter.kind | "inbound") == "outbound", "unknown", conditional(connection.mtls | false, "mutual_tls", "none"))
    source_workload_namespace: source.workload.namespace | "unknown"
    source_workload_name: source.workload.name | "unknown"
    source_owner: source.owner | "unknown"
    destination_workload_namespace: destination.workload.namespace | "unknown"
    destination_workload_name: destination.workload.name | "unknown"
    destination_owner: destination.owner | "unknown"
    destination_principal: destination.principal | "unknown"
    source_principal: source.principal | "unknown"
  monitoredResourceType: '"k8s_pod"'
  monitoredResourceDimensions:
    project_id: '""'
    cluster_name: '""'
    namespace_name: source.workload.namespace | "unknown"
    location: '""'
    pod_name: source.name | "unknown"
---
apiVersion: "config.istio.io/v1alpha2"
kind: metric
metadata:
  name: server-received-bytes-count
  namespace: istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
spec:
  value: connection.received.bytes | 0
  dimensions:
    destination_service_name: destination.service.name | "unknown"
    destination_service_namespace: destination.service.namespace | "unknown"
    destination_port: destination.port | 0
    request_protocol: context.protocol | "unknown"
    service_authentication_policy: conditional((context.reporter.kind | "inbound") == "outbound", "unknown", conditional(connection.mtls | false, "mutual_tls", "none"))
    source_workload_namespace: source.workload.namespace | "unknown"
    source_workload_name: source.workload.name | "unknown"
    source_owner: source.owner | "unknown"
    destination_workload_namespace: destination.workload.namespace | "unknown"
    destination_workload_name: destination.workload.name | "unknown"
    destination_owner: destination.owner | "unknown"
    destination_principal: destination.principal | "unknown"
    source_principal: source.principal | "unknown"
  monitoredResourceType: '"k8s_container"'
  monitoredResourceDimensions:
    project_id: '""'
    cluster_name: '""'
    namespace_name: destination.workload.namespace | "unknown"
    location: '""'
    container_name: conditional((destination.name | "unknown").startsWith("istio-telemetry") || (destination.name | "unknown").startsWith("istio-policy"), "mixer", destination.container.name | "unknown")
    pod_name: destination.name | "unknown"
---
apiVersion: "config.istio.io/v1alpha2"
kind: metric
metadata:
  name: client-received-bytes-count
  namespace: istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
spec:
  value: connection.received.bytes | 0
  dimensions:
    destination_service_name: destination.service.name | "unknown"
    destination_service_namespace: destination.service.namespace | "unknown"
    destination_port: destination.port | 0
    request_protocol: context.protocol | "unknown"
    service_authentication_policy: conditional((context.reporter.kind | "inbound") == "outbound", "unknown", conditional(connection.mtls | false, "mutual_tls", "none"))
    source_workload_namespace: source.workload.namespace | "unknown"
    source_workload_name: source.workload.name | "unknown"
    source_owner: source.owner | "unknown"
    destination_workload_namespace: destination.workload.namespace | "unknown"
    destination_workload_name: destination.workload.name | "unknown"
    destination_owner: destination.owner | "unknown"
    destination_principal: destination.principal | "unknown"
    source_principal: source.principal | "unknown"
  monitoredResourceType: '"k8s_pod"'
  monitoredResourceDimensions:
    project_id: '""'
    cluster_name: '""'
    namespace_name: source.workload.namespace | "unknown"
    location: '""'
    pod_name: source.name | "unknown"
---
apiVersion: "config.istio.io/v1alpha2"
kind: metric
metadata:
  name: server-sent-bytes-count
  namespace: istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
spec:
  value: connection.sent.bytes | 0
  dimensions:
    destination_service_name: destination.service.name | "unknown"
    destination_service_namespace: destination.service.namespace | "unknown"
    destination_port: destination.port | 0
    request_protocol: context.protocol | "unknown"
    service_authentication_policy: conditional((context.reporter.kind | "inbound") == "outbound", "unknown", conditional(connection.mtls | false, "mutual_tls", "none"))
    source_workload_namespace: source.workload.namespace | "unknown"
    source_workload_name: source.workload.name | "unknown"
    source_owner: source.owner | "unknown"
    destination_workload_namespace: destination.workload.namespace | "unknown"
    destination_workload_name: destination.workload.name | "unknown"
    destination_owner: destination.owner | "unknown"
    destination_principal: destination.principal | "unknown"
    source_principal: source.principal | "unknown"
  monitoredResourceType: '"k8s_container"'
  monitoredResourceDimensions:
    project_id: '""'
    cluster_name: '""'
    namespace_name: destination.workload.namespace | "unknown"
    location: '""'
    container_name: conditional((destination.name | "unknown").startsWith("istio-telemetry") || (destination.name | "unknown").startsWith("istio-policy"), "mixer", destination.container.name | "unknown")
    pod_name: destination.name | "unknown"
---
apiVersion: "config.istio.io/v1alpha2"
kind: metric
metadata:
  name: client-sent-bytes-count
  namespace: istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
spec:
  value: connection.sent.bytes | 0
  dimensions:
    destination_service_name: destination.service.name | "unknown"
    destination_service_namespace: destination.service.namespace | "unknown"
    destination_port: destination.port | 0
    request_protocol: context.protocol | "unknown"
    service_authentication_policy: conditional((context.reporter.kind | "inbound") == "outbound", "unknown", conditional(connection.mtls | false, "mutual_tls", "none"))
    source_workload_namespace: source.workload.namespace | "unknown"
    source_workload_name: source.workload.name | "unknown"
    source_owner: source.owner | "unknown"
    destination_workload_namespace: destination.workload.namespace | "unknown"
    destination_workload_name: destination.workload.name | "unknown"
    destination_owner: destination.owner | "unknown"
    destination_principal: destination.principal | "unknown"
    source_principal: source.principal | "unknown"
  monitoredResourceType: '"k8s_pod"'
  monitoredResourceDimensions:
    project_id: '""'
    cluster_name: '""'
    namespace_name: source.workload.namespace | "unknown"
    location: '""'
    pod_name: source.name | "unknown"
---
apiVersion: "config.istio.io/v1alpha2"
kind: rule
metadata:
  name: stackdriver-mixer
  namespace: istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
spec:
  match: (destination.name | "unknown").startsWith("istio-telemetry") || (destination.name | "unknown").startsWith("istio-policy")
  actions:
  - handler: handler.stackdriver
    instances:
    - mixer-request-latency.metric
    - mixer-request-count.metric
---
apiVersion: "config.istio.io/v1alpha2"
kind: metric
metadata:
  name: mixer-request-count
  namespace: istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
spec:
  value: "1"
  dimensions:
    grpc_path: conditional((context.protocol | "unknown") == "grpc", request.path | "unknown", request.method | "unknown")
    response_code: response.code | 0
  monitoredResourceType: '"gke_container"'
  monitoredResourceDimensions:
    cluster_name: '""'
    container_name: conditional((destination.name | "unknown").startsWith("istio-telemetry") || (destination.name | "unknown").startsWith("istio-policy"), "mixer", destination.container.name | "unknown")
    instance_id: '""'
    namespace_id: destination.workload.namespace | "unknown"
    pod_id: destination.name | "unknown"
    project_id: '""'
    zone: '""'
---
apiVersion: "config.istio.io/v1alpha2"
kind: metric
metadata:
  name: mixer-request-latency
  namespace: istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
spec:
  value: response.duration
  dimensions:
    grpc_path: conditional((context.protocol | "unknown") == "grpc", request.path | "unknown", request.method | "unknown")
    response_code: response.code | 0
  monitoredResourceType: '"gke_container"'
  monitoredResourceDimensions:
    cluster_name: '""'
    container_name: conditional((destination.name | "unknown").startsWith("istio-telemetry") || (destination.name | "unknown").startsWith("istio-policy"), "mixer", destination.container.name | "unknown")
    instance_id: '""'
    namespace_id: destination.workload.namespace | "unknown"
    pod_id: destination.name | "unknown"
    project_id: '""'
    zone: '""'
---
apiVersion: "config.istio.io/v1alpha2"
kind: tracespan
metadata:
  name: stackdriver-span
  namespace: istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
spec:
  traceId: request.headers["x-b3-traceid"]
  spanId: request.headers["x-b3-spanid"] | ""
  parentSpanId: request.headers["x-b3-parentspanid"] | ""
  spanName: destination.service.host | destination.service.name | destination.workload.name | "unknown"
  startTime: request.time
  endTime: response.time
  clientSpan: (context.reporter.kind | "inbound") == "outbound"
  rewriteClientSpanId: "true"
  spanTags:
    destination_service_name: destination.service.name | "unknown"
    destination_service_namespace: destination.service.namespace | "unknown"
    destination_port: destination.port | 0
    request_operation: conditional((context.protocol | "unknown") == "grpc", request.path | "unknown", request.method | "unknown")
    request_protocol: context.protocol | "unknown"
    api_version: api.version | "unknown"
    api_name: api.service | "unknown"
    response_code: response.code | 0
    service_authentication_policy: conditional((context.reporter.kind | "inbound") == "outbound", "unknown", conditional(connection.mtls | false, "mutual_tls", "none"))
    source_workload_namespace: source.workload.namespace | "unknown"
    source_workload_name: source.workload.name | "unknown"
    source_owner: source.owner | "unknown"
    destination_workload_namespace: destination.workload.namespace | "unknown"
    destination_workload_name: destination.workload.name | "unknown"
    destination_owner: destination.owner | "unknown"
    http_url: request.path | ""
    request_size: request.size | 0
    response_size: response.size | 0
    source_ip: source.ip | ip("0.0.0.0")
---
apiVersion: "config.istio.io/v1alpha2"
kind: rule
metadata:
  name: stackdriver-tracing-rule
  namespace: istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: EnsureExists
spec:
  match: "false"
  actions:
  - handler: handler.stackdriver.istio-system
    instances:
    - stackdriver-span.tracespan.istio-system
---
apiVersion: "config.istio.io/v1alpha2"
kind: logentry
metadata:
  name: server-accesslog-stackdriver
  namespace: istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
spec:
  severity: '"Info"'
  timestamp: request.time
  variables:
    source_uid: source.uid | ""
    source_ip: source.ip | ip("0.0.0.0")
    source_app: source.labels["app"] | ""
    source_principal: source.principal | ""
    source_name: source.name | ""
    source_workload: source.workload.name | ""
    source_namespace: source.namespace | ""
    source_owner: source.owner | ""
    destination_uid: destination.uid | ""
    destination_app: destination.labels["app"] | ""
    destination_ip: destination.ip | ip("0.0.0.0")
    destination_service_host: destination.service.host | ""
    destination_service_name: destination.service.name | "unknown"
    destination_service_namespace: destination.service.namespace | "unknown"
    destination_workload: destination.workload.name | ""
    destination_name: destination.name | ""
    destination_namespace: destination.namespace | ""
    destination_owner: destination.owner | ""
    destination_principal: destination.principal | ""
    api_name: api.service | ""
    api_version: api.version | ""
    api_claims: request.auth.raw_claims | ""
    api_key: request.api_key | request.headers["x-api-key"] | ""
    request_operation: conditional((context.protocol | "unknown") == "grpc", request.path | "unknown", request.method | "unknown")
    protocol: request.scheme | context.protocol | "http"
    method: request.method | ""
    url: request.path | ""
    response_code: response.code | 0
    response_size: response.size | 0
    request_size: request.size | 0
    request_id: request.headers["x-request-id"] | ""
    client_trace_id: request.headers["x-client-trace-id"] | ""
    latency: response.duration | "0ms"
    service_authentication_policy: conditional((context.reporter.kind | "inbound") == "outbound", "unknown", conditional(connection.mtls | false, "mutual_tls", "none"))
    user_agent: request.useragent | ""
    response_timestamp: response.time
    received_bytes: request.total_size | 0
    sent_bytes: response.total_size | 0
    referer: request.referer | ""
  monitored_resource_type: '"k8s_container"'
  monitoredResourceDimensions:
    project_id: '""'
    cluster_name: '""'
    namespace_name: destination.namespace | "unknown"
    location: '""'
    container_name: conditional((destination.name | "unknown").startsWith("istio-telemetry") || (destination.name | "unknown").startsWith("istio-policy"), "mixer", destination.container.name | "unknown")
    pod_name: destination.name | "unknown"
---
apiVersion: "config.istio.io/v1alpha2"
kind: logentry
metadata:
  name: server-tcp-accesslog-stackdriver
  namespace: istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
spec:
  severity: '"Info"'
  timestamp: context.time | timestamp("2017-01-01T00:00:00Z")
  variables:
    source_uid: source.uid | ""
    connection_id: connection.id | ""
    connection_event: connection.event | ""
    source_ip: source.ip | ip("0.0.0.0")
    source_app: source.labels["app"] | ""
    source_principal: source.principal | ""
    source_name: source.name | ""
    source_workload: source.workload.name | ""
    source_namespace: source.namespace | ""
    source_owner: source.owner | ""
    destination_uid: destination.uid | ""
    destination_app: destination.labels["app"] | ""
    destination_ip: destination.ip | ip("0.0.0.0")
    destination_service_host: destination.service.host | ""
    destination_service_name: destination.service.name | "unknown"
    destination_service_namespace: destination.service.namespace | "unknown"
    destination_workload: destination.workload.name | ""
    destination_name: destination.name | ""
    destination_namespace: destination.namespace | ""
    destination_owner: destination.owner | ""
    destination_principal: destination.principal | ""
    protocol: context.protocol | "tcp"
    connction_duration: connection.duration | "0ms"
    service_authentication_policy: conditional((context.reporter.kind | "inbound") == "outbound", "unknown", conditional(connection.mtls | false, "mutual_tls", "none"))
    received_bytes: connection.received.bytes | 0
    sent_bytes: connection.sent.bytes | 0
    total_received_bytes: connection.received.bytes_total | 0
    total_sent_bytes: connection.sent.bytes_total | 0
  monitored_resource_type: '"k8s_container"'
  monitoredResourceDimensions:
    project_id: '""'
    cluster_name: '""'
    namespace_name: destination.namespace | "unknown"
    location: '""'
    container_name: conditional((destination.name | "unknown").startsWith("istio-telemetry") || (destination.name | "unknown").startsWith("istio-policy"), "mixer", destination.container.name | "unknown")
    pod_name: destination.name | "unknown"
---
apiVersion: "config.istio.io/v1alpha2"
kind: rule
metadata:
  name: stackdriver-log
  namespace: istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: EnsureExists
spec:
  match: (context.protocol == "http" || context.protocol == "grpc") && (context.reporter.kind | "inbound" == "inbound")
  actions:
  - handler: handler.stackdriver
    instances:
    - server-accesslog-stackdriver.logentry
---
apiVersion: "config.istio.io/v1alpha2"
kind: rule
metadata:
  name: stackdriver-log-tcp
  namespace: istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: EnsureExists
spec:
  match: (context.protocol == "tcp") && (context.reporter.kind | "inbound" == "inbound")
  actions:
  - handler: handler.stackdriver
    instances:
    - server-tcp-accesslog-stackdriver.logentry
---
apiVersion: "config.istio.io/v1alpha2"
kind: edge
metadata:
  name: default
  namespace: istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
spec:
  timestamp: request.time | context.time
  sourceUid: source.uid | "Unknown"
  sourceOwner: source.owner | "Unknown"
  sourceWorkloadName: source.workload.name | "Unknown"
  sourceWorkloadNamespace: source.workload.namespace | "Unknown"
  destinationUid: destination.uid | "Unknown"
  destinationOwner: destination.owner | "Unknown"
  destinationWorkloadName: destination.workload.name | "Unknown"
  destinationWorkloadNamespace: destination.workload.namespace | "Unknown"
  contextProtocol: context.protocol | "Unknown"
  apiProtocol: api.protocol | "Unknown"
  destinationServiceName: destination.service.name | "Unknown"
  destinationServiceNamespace: destination.service.namespace | "Unknown"
---
apiVersion: "config.istio.io/v1alpha2"
kind: rule
metadata:
  name: edgetosd
  namespace: istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
spec:
  match: (context.reporter.kind | "inbound" == "inbound") && (context.protocol | "unknown" != "unknown")
  actions:
   - handler: handler.stackdriver
     instances:
     - default.edge
---
# Prometheus recording rules to translate metrics to StackDriver format.
apiVersion: v1
kind: ConfigMap
metadata:
  name: promsd-rules
  namespace: istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
    app: promsd
    chart: promsd-1.0.3
    release: istio
    heritage: Tiller
data:
  rules.yml: |-
    groups:
    - name: recording_rules
      rules:
        - record: pilot_config_push_latency
          expr: pilot_proxy_convergence_time_bucket
        - record: pilot_xds_push_timeouts
          expr: pilot_xds_push_timeout_failures
        - record: pilot_errors_xds
          expr: >
            pilot_duplicate_envoy_clusters + pilot_eds_no_instances + pilot_invalid_out_listeners
            + pilot_total_xds_internal_errors + pilot_total_xds_rejects
        - record: pilot_errors_internal
          expr: pilot_total_internal_errors
        - record: mixer_dropped_request_count
          expr: mixer_loadshedding_requests_throttled
        - record: envoy_cx_errors
          expr: >
            envoy_cluster_upstream_cx_connect_attempts_exceeded + envoy_cluster_upstream_cx_protocol_error
            + envoy_cluster_downstream_cx_connect_attempts_exceeded + envoy_cluster_downstream_cx_protocol_error
        - record: envoy_cx_timeouts
          expr: envoy_cluster_upstream_cx_connect_timeout + envoy_cluster_downstream_cx_connect_timeout
        - record: envoy_rq_latency
          expr: envoy_http_downstream_rq_time
---
# Prometheus recording rules to translate metrics to StackDriver format.
apiVersion: v1
kind: ConfigMap
metadata:
  name: promsd-sidecar
  namespace: istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
    app: promsd
    chart: promsd-1.0.3
    release: istio
    heritage: Tiller
data:
  sidecar.yml: |-
    static_metadata:
    - metric: pilot_xds_pushes
      type: counter
    - metric: pilot_config_push_latency
      type: histogram
    - metric: pilot_xds_push_timeouts
      type: counter
    - metric: pilot_errors_xds
      type: counter
    - metric: pilot_errors_internal
      type: counter
    - metric: mixer_dropped_request_count
      type: counter
    - metric: envoy_cx_errors
      type: counter
    - metric: envoy_cx_timeouts
      type: counter
    - metric: envoy_rq_latency
      type: histogram
    - metric: envoy_cx_count
      type: counter
    - metric: envoy_rq_count
      type: counter
    - metric: envoy_http_mixer_filter_total_report_calls
      type: counter
---
# Source: istio/charts/prometheus/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: promsd
  namespace: istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
    app: promsd
    chart: promsd-1.0.3
    release: istio
    heritage: Tiller
data:
  prometheus.yml: |-
    global:
      scrape_interval: 15s
    rule_files:
    - '/etc/prometheus-rules/rules.yml'

    scrape_configs:
    - job_name: 'pilot'
      # Override the global default and scrape targets from this job every 5 seconds.
      scrape_interval: 5s
      # metrics_path defaults to '/metrics'
      # scheme defaults to 'http'.

      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
          - istio-system

      relabel_configs:
      - source_labels: [__meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
        action: keep
        regex: istio-pilot;http-monitoring

    # Scrape config for envoy stats
    - job_name: 'envoy-stats'
      metrics_path: /stats/prometheus
      kubernetes_sd_configs:
      - role: pod

      relabel_configs:
      - source_labels: [__meta_kubernetes_pod_container_port_name]
        action: keep
        regex: '.*-envoy-prom'
      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
        action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:15090
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: pod_name

      metric_relabel_configs:
      # Exclude some of the envoy metrics that have massive cardinality
      # This list may need to be pruned further moving forward, as informed
      # by performance and scalability testing.
      - source_labels: [ cluster_name ]
        regex: '(outbound|inbound|prometheus_stats).*'
        action: drop
      - source_labels: [ tcp_prefix ]
        regex: '(outbound|inbound|prometheus_stats).*'
        action: drop
      - source_labels: [ listener_address ]
        regex: '(.+)'
        action: drop
      - source_labels: [ http_conn_manager_listener_prefix ]
        regex: '(.+)'
        action: drop
      - source_labels: [ http_conn_manager_prefix ]
        regex: '(.+)'
        action: drop
      - source_labels: [ __name__ ]
        regex: 'envoy_tls.*'
        action: drop
      - source_labels: [ __name__ ]
        regex: 'envoy_tcp_downstream.*'
        action: drop
      - source_labels: [ __name__ ]
        regex: 'envoy_http_(stats|admin).*'
        action: drop
      - source_labels: [ __name__ ]
        regex: 'envoy_cluster_(lb|retry|bind|internal|max|original).*'
        action: drop
      # Rename/relabel for internal metrics
      - source_labels: [ __name__ ]
        regex: 'envoy_cluster_(upstream|downstream)_rq_total'
        replacement: '${1}'
        target_label: direction
      - source_labels: [ __name__ ]
        regex: 'envoy_cluster_(upstream|downstream)_rq_total'
        replacement: 'envoy_rq_count'
        target_label: __name__
      - source_labels: [ __name__ ]
        regex: 'envoy_cluster_(upstream|downstream)_cx_total'
        replacement: '${1}'
        target_label: direction
      - source_labels: [ __name__ ]
        regex: 'envoy_cluster_(upstream|downstream)_cx_total'
        replacement: 'envoy_cx_count'
        target_label: __name__
      - source_labels: [ __name__ ]
        regex: 'envoy_cluster_(upstream|downstream)_rq_timeout'
        replacement: '${1}'
        target_label: direction
      - source_labels: [ __name__ ]
        regex: 'envoy_cluster_(upstream|downstream)_rq_timeout'
        replacement: 'envoy_rq_timeouts'
        target_label: __name__

    - job_name: 'istio-policy'
      # Override the global default and scrape targets from this job every 5 seconds.
      scrape_interval: 5s
      # metrics_path defaults to '/metrics'
      # scheme defaults to 'http'.

      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
          - istio-system


      relabel_configs:
      - source_labels: [__meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
        action: keep
        regex: istio-policy;http-monitoring

    - job_name: 'istio-telemetry'
      # Override the global default and scrape targets from this job every 5 seconds.
      scrape_interval: 5s
      # metrics_path defaults to '/metrics'
      # scheme defaults to 'http'.

      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
          - istio-system

      relabel_configs:
      - source_labels: [__meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
        action: keep
        regex: istio-telemetry;http-monitoring

---
# Source: istio/charts/prometheus/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: promsd-istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
rules:
- apiGroups: [""]
  resources:
  - nodes
  - services
  - endpoints
  - pods
  - nodes/proxy
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources:
  - configmaps
  verbs: ["get"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]

---
# Source: istio/charts/prometheus/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: promsd
  namespace: istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile

---
# Source: istio/charts/prometheus/templates/clusterrolebindings.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: promsd-istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: promsd-istio-system
subjects:
- kind: ServiceAccount
  name: promsd
  namespace: istio-system

---
# Source: istio/charts/prometheus/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: promsd
  namespace: istio-system
  annotations:
    prometheus.io/scrape: 'true'
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
    kubernetes.io/cluster-service: "true"
    name: promsd
spec:
  selector:
    app: promsd
  ports:
  - name: http-prometheus
    protocol: TCP
    port: 9090

---
# Source: istio/charts/prometheus/templates/deployment.yaml
# TODO: the original template has service account, roles, etc
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: promsd
  namespace: istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
    app: promsd
    chart: promsd-1.0.3
    release: istio
    heritage: Tiller
spec:
  selector:
    matchLabels:
      app: promsd
  template:
    metadata:
      labels:
        app: promsd
      annotations:
        seccomp.security.alpha.kubernetes.io/pod: 'docker/default'
        sidecar.istio.io/inject: "false"
        scheduler.alpha.kubernetes.io/critical-pod: ""
    spec:
      serviceAccountName: promsd
      containers:
      - args:
        - --prometheus.wal-directory=/data/wal
        - --stackdriver.project-id=
        - --stackdriver.kubernetes.location=
        - --stackdriver.kubernetes.cluster-name=
        - --stackdriver.use-gke-resource
        - --stackdriver.metrics-prefix=container.googleapis.com/internal/addons/istio
        - --config-file=/etc/prometheus-sidecar/sidecar.yml
        - --filter=__name__=~"^(pilot_xds_pushes|pilot_xds_push_timeouts|pilot_errors_xds|pilot_errors_internal|mixer_dropped_request_count|envoy_cx_errors|envoy_cx_timeouts|envoy_cx_count|envoy_rq_count|envoy_http_mixer_filter_total_report_calls)$"
        image: "gcr.io/gke-release/istio/prometheus/stackdriver-prometheus-sidecar:0.1"
        env:
        - name: DEBUG
          value: "1"
        imagePullPolicy: Always
        name: sidecar
        ports:
        - containerPort: 9091
          name: sidecar
          protocol: TCP
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /data
          name: data-volume
        - mountPath: /etc/prometheus-sidecar
          name: static-config-volume
      - args:
        - --storage.tsdb.retention=6h
        - --storage.tsdb.path=/data
        - --storage.tsdb.min-block-duration=15m
        - --storage.tsdb.max-block-duration=4h
        - --config.file=/etc/prometheus/prometheus.yml
        image: "gcr.io/gke-release/istio/prometheus/prometheus:v2.4.3"
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /-/healthy
            port: 9090
            scheme: HTTP
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        name: promsd
        ports:
        - containerPort: 9090
          name: http
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /-/ready
            port: 9090
            scheme: HTTP
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /etc/prometheus
          name: config-volume
        - mountPath: /etc/prometheus-rules
          name: rules-config-volume
        - mountPath: /etc/istio-certs
          name: istio-certs
        - mountPath: /data
          name: data-volume
      volumes:
      - configMap:
          defaultMode: 420
          name: promsd
        name: config-volume
      - configMap:
          defaultMode: 420
          name: promsd-rules
        name: rules-config-volume
      - emptyDir: {}
        name: data-volume
      - configMap:
          defaultMode: 420
          name: promsd-sidecar
        name: static-config-volume
      - name: istio-certs
        secret:
          defaultMode: 420
          optional: true
          secretName: istio.default
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - amd64
                - ppc64le
                - s390x
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 2
            preference:
              matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - amd64
          - weight: 2
            preference:
              matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - ppc64le
          - weight: 2
            preference:
              matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - s390x

---
apiVersion: "config.istio.io/v1alpha2"
kind: metric
metadata:
  name: mixer-request-count
  namespace: istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
spec:
  value: "1"
  dimensions:
    grpc_path: conditional((context.protocol | "unknown") == "grpc", request.path | "unknown", request.method | "unknown")
    response_code: response.code | 0
  monitoredResourceType: '"gke_container"'
  monitoredResourceDimensions:
    cluster_name: '""'
    container_name: conditional((destination.name | "unknown").startsWith("istio-telemetry") || (destination.name | "unknown").startsWith("istio-policy"), "mixer", destination.container.name | "unknown")
    instance_id: '""'
    namespace_id: destination.workload.namespace | "unknown"
    pod_id: destination.name | "unknown"
    project_id: '""'
    zone: '""'
---
apiVersion: "config.istio.io/v1alpha2"
kind: metric
metadata:
  name: mixer-request-latency
  namespace: istio-system
  labels:
    k8s-app: istio
    addonmanager.kubernetes.io/mode: Reconcile
spec:
  value: response.duration
  dimensions:
    grpc_path: conditional((context.protocol | "unknown") == "grpc", request.path | "unknown", request.method | "unknown")
    response_code: response.code | 0
  monitoredResourceType: '"gke_container"'
  monitoredResourceDimensions:
    cluster_name: '""'
    container_name: conditional((destination.name | "unknown").startsWith("istio-telemetry") || (destination.name | "unknown").startsWith("istio-policy"), "mixer", destination.container.name | "unknown")
    instance_id: '""'
    namespace_id: destination.workload.namespace | "unknown"
    pod_id: destination.name | "unknown"
    project_id: '""'
    zone: '""'
---

